import { createHash } from 'crypto';

const camelCaseToParamCase = (input) => {
  return input.replace(/[A-Z]/g, (match) => {
    return `-${match.toLowerCase()}`;
  });
};
const buildURL = (url, params) => {
  const instance = new URL(url);
  for (const camelCasedParamKey in params) {
    const paramKey = camelCaseToParamCase(camelCasedParamKey);
    const paramValue = params[camelCasedParamKey];
    if (paramValue === void 0) {
      instance.searchParams.delete(paramKey);
    } else if (Array.isArray(paramValue)) {
      instance.searchParams.set(paramKey, paramValue.join(","));
    } else {
      instance.searchParams.set(paramKey, `${paramValue}`);
    }
  }
  const s = instance.searchParams.get("s");
  if (s) {
    instance.searchParams.delete("s");
    instance.searchParams.append("s", s);
  }
  return instance.toString();
};

const buildPixelDensitySrcSet = (url, { pixelDensities, ...params }) => {
  return pixelDensities.map((dpr) => {
    return `${buildURL(url, { ...params, dpr })} ${dpr}x`;
  }).join(", ");
};

const signURL = (url, secureURLToken) => {
  const instance = new URL(url);
  instance.searchParams.delete("s");
  const signature = createHash("md5").update(secureURLToken + instance.pathname + instance.search).digest("hex");
  instance.searchParams.append("s", signature);
  return instance.toString();
};

const buildSignedURL = (url, secureURLToken, params) => {
  return signURL(buildURL(url, params), secureURLToken);
};

const buildSignedPixelDensitySrcSet = (url, secureURLToken, { pixelDensities, ...params }) => {
  return pixelDensities.map((dpr) => {
    return `${buildSignedURL(url, secureURLToken, {
      ...params,
      dpr
    })} ${dpr}x`;
  }).join(", ");
};

const buildSignedWidthSrcSet = (url, secureURLToken, { widths, ...params }) => {
  return widths.map((width) => {
    return `${buildSignedURL(url, secureURLToken, {
      ...params,
      w: void 0,
      width
    })} ${width}w`;
  }).join(", ");
};

const buildWidthSrcSet = (url, { widths, ...params }) => {
  return widths.map((width) => {
    return `${buildURL(url, { ...params, w: void 0, width })} ${width}w`;
  }).join(", ");
};

class SecureClient {
  constructor(options) {
    this.baseURL = options.baseURL;
    this.secureURLToken = options.secureURLToken;
  }
  buildWebProxyURL(url, params = {}) {
    return this.buildSignedURLForPath(encodeURIComponent(url), params);
  }
  buildSignedURLForPath(path, params = {}) {
    return this.signURL(this.buildURLForPath(path, params));
  }
  buildURLForPath(path, params = {}) {
    return buildURL(`${new URL(path, this.baseURL)}`, params);
  }
  buildSignedURL(url, params = {}) {
    return buildSignedURL(url, this.secureURLToken, params);
  }
  signURL(url) {
    return signURL(url, this.secureURLToken);
  }
  buildSignedWidthSrcSet(url, params) {
    return buildSignedWidthSrcSet(url, this.secureURLToken, params);
  }
  buildWidthSrcSetForPath(path, params) {
    return buildWidthSrcSet(`${new URL(path, this.baseURL)}`, params);
  }
  buildSignedWidthSrcSetForPath(path, params) {
    return this.buildSignedWidthSrcSet(`${new URL(path, this.baseURL)}`, params);
  }
  buildSignedPixelDensitySrcSet(url, params) {
    return buildSignedPixelDensitySrcSet(url, this.secureURLToken, params);
  }
  buildPixelDensitySrcSetForPath(path, params) {
    return buildPixelDensitySrcSet(`${new URL(path, this.baseURL)}`, params);
  }
  buildSignedPixelDensitySrcSetForPath(path, params) {
    return buildSignedPixelDensitySrcSet(`${new URL(path, this.baseURL)}`, this.secureURLToken, params);
  }
}

export { SecureClient, buildSignedPixelDensitySrcSet, buildSignedURL, buildSignedWidthSrcSet, buildURL, signURL };
//# sourceMappingURL=index.mjs.map
