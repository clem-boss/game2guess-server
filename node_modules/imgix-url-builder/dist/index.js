const camelCaseToParamCase = (input) => {
  return input.replace(/[A-Z]/g, (match) => {
    return `-${match.toLowerCase()}`;
  });
};
const buildURL = (url, params) => {
  const instance = new URL(url);
  for (const camelCasedParamKey in params) {
    const paramKey = camelCaseToParamCase(camelCasedParamKey);
    const paramValue = params[camelCasedParamKey];
    if (paramValue === void 0) {
      instance.searchParams.delete(paramKey);
    } else if (Array.isArray(paramValue)) {
      instance.searchParams.set(paramKey, paramValue.join(","));
    } else {
      instance.searchParams.set(paramKey, `${paramValue}`);
    }
  }
  const s = instance.searchParams.get("s");
  if (s) {
    instance.searchParams.delete("s");
    instance.searchParams.append("s", s);
  }
  return instance.toString();
};

const buildPixelDensitySrcSet = (url, { pixelDensities, ...params }) => {
  return pixelDensities.map((dpr) => {
    return `${buildURL(url, { ...params, dpr })} ${dpr}x`;
  }).join(", ");
};

const buildWidthSrcSet = (url, { widths, ...params }) => {
  return widths.map((width) => {
    return `${buildURL(url, { ...params, w: void 0, width })} ${width}w`;
  }).join(", ");
};

class Client {
  constructor(options) {
    this.baseURL = options.baseURL;
  }
  buildURLForPath(path, params = {}) {
    return buildURL(`${new URL(path, this.baseURL)}`, params);
  }
  buildWidthSrcSetForPath(path, params) {
    return buildWidthSrcSet(`${new URL(path, this.baseURL)}`, params);
  }
  buildPixelDensitySrcSetForPath(path, params) {
    return buildPixelDensitySrcSet(`${new URL(path, this.baseURL)}`, params);
  }
}

export { Client, buildPixelDensitySrcSet, buildURL, buildWidthSrcSet };
//# sourceMappingURL=index.mjs.map
