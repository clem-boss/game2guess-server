import { getRepositoryEndpoint } from "./getRepositoryEndpoint";
export { getRepositoryEndpoint };
/**
 * @deprecated Renamed to `getRepositoryEndpoint`.
 */
export declare const getEndpoint: <RepositoryName extends string>(repositoryName: RepositoryName) => `https://${RepositoryName}.cdn.prismic.io/api/v2`;
export { getRepositoryName } from "./getRepositoryName";
export { getGraphQLEndpoint } from "./getGraphQLEndpoint";
export { isRepositoryName } from "./isRepositoryName";
export { isRepositoryEndpoint } from "./isRepositoryEndpoint";
export { buildQueryURL } from "./buildQueryURL";
export { createClient, Client } from "./client";
import { predicate } from "./predicate";
export { predicate };
/**
 * @deprecated Renamed to `predicate` (without an "s").
 */
export declare const predicates: {
    at: (path: string, value: string | number | boolean | string[] | Date) => string;
    not: (path: string, value: string | number | boolean | string[] | Date) => string;
    any: (path: string, values: (string | number | boolean | Date)[]) => string;
    in: (path: string, values: string[]) => string;
    fulltext: (path: string, searchTerms: string) => string;
    has: (path: string) => string;
    missing: (path: string) => string;
    similar: (id: string, value: number) => string;
    geopointNear: (path: string, latitude: number, longitude: number, radius: number) => string;
    numberLessThan: (path: string, value: number) => string;
    numberGreaterThan: (path: string, value: number) => string;
    numberInRange: (path: string, lowerLimit: number, upperLimit: number) => string;
    dateAfter: (path: string, date: string | number | Date) => string;
    dateBefore: (path: string, date: string | number | Date) => string;
    dateBetween: (path: string, startDate: string | number | Date, endDate: string | number | Date) => string;
    dateDayOfMonth: (path: string, day: number) => string;
    dateDayOfMonthAfter: (path: string, day: number) => string;
    dateDayOfMonthBefore: (path: string, day: number) => string;
    dateDayOfWeek: (path: string, day: string | number) => string;
    dateDayOfWeekAfter: (path: string, day: string | number) => string;
    dateDayOfWeekBefore: (path: string, day: string | number) => string;
    dateMonth: (path: string, month: string | number) => string;
    dateMonthAfter: (path: string, month: string | number) => string;
    dateMonthBefore: (path: string, month: string | number) => string;
    dateYear: (path: string, year: number) => string;
    dateHour: (path: string, hour: number) => string;
    dateHourAfter: (path: string, hour: number) => string;
    dateHourBefore: (path: string, hour: number) => string;
};
/**
 * @deprecated Renamed to `predicate` (lowercase and without an "s").
 */
export declare const Predicates: {
    at: (path: string, value: string | number | boolean | string[] | Date) => string;
    not: (path: string, value: string | number | boolean | string[] | Date) => string;
    any: (path: string, values: (string | number | boolean | Date)[]) => string;
    in: (path: string, values: string[]) => string;
    fulltext: (path: string, searchTerms: string) => string;
    has: (path: string) => string;
    missing: (path: string) => string;
    similar: (id: string, value: number) => string;
    geopointNear: (path: string, latitude: number, longitude: number, radius: number) => string;
    numberLessThan: (path: string, value: number) => string;
    numberGreaterThan: (path: string, value: number) => string;
    numberInRange: (path: string, lowerLimit: number, upperLimit: number) => string;
    dateAfter: (path: string, date: string | number | Date) => string;
    dateBefore: (path: string, date: string | number | Date) => string;
    dateBetween: (path: string, startDate: string | number | Date, endDate: string | number | Date) => string;
    dateDayOfMonth: (path: string, day: number) => string;
    dateDayOfMonthAfter: (path: string, day: number) => string;
    dateDayOfMonthBefore: (path: string, day: number) => string;
    dateDayOfWeek: (path: string, day: string | number) => string;
    dateDayOfWeekAfter: (path: string, day: string | number) => string;
    dateDayOfWeekBefore: (path: string, day: string | number) => string;
    dateMonth: (path: string, month: string | number) => string;
    dateMonthAfter: (path: string, month: string | number) => string;
    dateMonthBefore: (path: string, month: string | number) => string;
    dateYear: (path: string, year: number) => string;
    dateHour: (path: string, hour: number) => string;
    dateHourAfter: (path: string, hour: number) => string;
    dateHourBefore: (path: string, hour: number) => string;
};
export { PrismicError } from "./PrismicError";
export { ForbiddenError } from "./ForbiddenError";
export { ParsingError } from "./ParsingError";
export { NotFoundError } from "./NotFoundError";
export * as cookie from "./cookie";
export type { CreateClient, ClientConfig } from "./client";
export type { QueryParams, BuildQueryURLArgs } from "./buildQueryURL";
export type { AbortSignalLike, FetchLike, HttpRequestLike, Ordering, RequestInitLike, ResponseLike, Route, } from "./types";
