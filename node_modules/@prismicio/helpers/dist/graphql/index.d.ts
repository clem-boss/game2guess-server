import * as _prismicio_types from '@prismicio/types';
import { DateField, TimestampField, FilledLinkToDocumentField, RichTextField } from '@prismicio/types';
import * as _prismicio_types_dist_graphql from '@prismicio/types/dist/graphql';
import { FilledMinimalLinkToDocumentField } from '@prismicio/types/dist/graphql';
import { RichTextFunctionSerializer, RichTextMapSerializer, RichTextMapSerializerFunction } from '@prismicio/richtext';
export { asText } from '@prismicio/richtext';

/**
 * The return type of `asDate()`.
 */
declare type AsDateReturnType<Field extends DateField | TimestampField | null | undefined> = Field extends DateField<"filled"> | TimestampField<"filled"> ? Date : null;
/**
 * Transforms a date or timestamp field into a JavaScript Date object
 *
 * @param dateOrTimestampField - A date or timestamp field from Prismic
 *
 * @returns A Date object, null if provided date is falsy
 * @see Templating date field from Prismic {@link https://prismic.io/docs/technologies/templating-date-field-javascript}
 */
declare const asDate: <Field extends `${number}-${number}-${number}` | `${number}-${number}-${number}T${number}:${number}:${number}+${number}` | null | undefined>(dateOrTimestampField: Field) => AsDateReturnType<Field>;

/**
 * Resolves a link to a Prismic document to a URL
 *
 * @typeParam LinkToDocumentField - An extended version of the minimal link to
 *   document field
 * @typeParam ReturnType - Return type of your link resolver function, useful if
 *   you prefer to return a complex object
 * @param linkToDocumentField - A document link to resolve
 *
 * @returns Resolved URL
 * @experimental
 * @see Prismic link resolver documentation: {@link https://prismic.io/docs/technologies/link-resolver-javascript}
 */
declare type LinkResolverFunction$1<LinkToDocumentField extends FilledMinimalLinkToDocumentField = FilledMinimalLinkToDocumentField, ReturnType = string> = (linkToDocumentField: LinkToDocumentField) => ReturnType;

/**
 * Resolves any type of link field to a URL
 *
 * @typeParam LinkResolverLinkToDocumentField - Link resolver link to document field type
 * @typeParam LinkResolverFunctionReturnType - Link resolver function return type
 * @param linkField - Any kind of link field to resolve
 * @param linkResolver - A link resolver function, without it you're expected to
 *   use the `routes` from the API
 *
 * @returns Resolved URL, null if provided link is empty
 * @experimental
 * @see Prismic link resolver documentation: {@link https://prismic.io/docs/technologies/link-resolver-javascript}
 * @see Prismic API `routes` options documentation: {@link https://prismic.io/docs/technologies/route-resolver-nuxtjs}
 */
declare const asLink: <LinkResolverLinkToDocumentField extends FilledMinimalLinkToDocumentField = FilledMinimalLinkToDocumentField, LinkResolverFunctionReturnType = string>(linkField: LinkResolverLinkToDocumentField | _prismicio_types_dist_graphql.FilledMinimalLinkToWebField | _prismicio_types_dist_graphql.FilledMinimalLinkToMediaField | null, linkResolver?: LinkResolverFunction$1<LinkResolverLinkToDocumentField, LinkResolverFunctionReturnType> | null | undefined) => string | LinkResolverFunctionReturnType | null;

/**
 * Resolves a link to a Prismic document to a URL
 *
 * @typeParam ReturnType - Return type of your link resolver function, useful if
 *   you prefer to return a complex object
 * @param linkToDocumentField - A document link field to resolve
 *
 * @returns Resolved URL
 * @see Prismic link resolver documentation: {@link https://prismic.io/docs/technologies/link-resolver-javascript}
 */
declare type LinkResolverFunction<ReturnType = string> = (linkToDocumentField: FilledLinkToDocumentField) => ReturnType;
/**
 * Serializes a node from a rich text or title field with a function to HTML
 *
 * Unlike a typical `@prismicio/richtext` function serializer, this serializer
 * converts the `children` argument to a single string rather than an array of strings.
 *
 * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}
 */
declare type HTMLFunctionSerializer = (type: Parameters<RichTextFunctionSerializer<string>>[0], node: Parameters<RichTextFunctionSerializer<string>>[1], text: Parameters<RichTextFunctionSerializer<string>>[2], children: Parameters<RichTextFunctionSerializer<string>>[3][number], key: Parameters<RichTextFunctionSerializer<string>>[4]) => string | null | undefined;
/**
 * Serializes a node from a rich text or title field with a map to HTML
 *
 * Unlike a typical `@prismicio/richtext` map serializer, this serializer
 * converts the `children` property to a single string rather than an array of strings.
 *
 * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}
 */
declare type HTMLMapSerializer = {
    [P in keyof RichTextMapSerializer<string>]: (payload: {
        type: Parameters<HTMLMapSerializerFunction<P>>[0]["type"];
        node: Parameters<HTMLMapSerializerFunction<P>>[0]["node"];
        text: Parameters<HTMLMapSerializerFunction<P>>[0]["text"];
        children: Parameters<HTMLMapSerializerFunction<P>>[0]["children"][number];
        key: Parameters<HTMLMapSerializerFunction<P>>[0]["key"];
    }) => string | null | undefined;
};
/**
 * A {@link RichTextMapSerializerFunction} type specifically for {@link HTMLMapSerializer}.
 *
 * @typeParam BlockName - The serializer's Rich Text block type.
 */
declare type HTMLMapSerializerFunction<BlockType extends keyof RichTextMapSerializer<string>> = RichTextMapSerializerFunction<string, ExtractNodeGeneric<RichTextMapSerializer<string>[BlockType]>, ExtractTextTypeGeneric<RichTextMapSerializer<string>[BlockType]>>;
/**
 * Returns the `Node` generic from {@link RichTextMapSerializerFunction}.
 *
 * @typeParam T - The `RichTextMapSerializerFunction` containing the needed
 *   `Node` generic.
 */
declare type ExtractNodeGeneric<T> = T extends RichTextMapSerializerFunction<any, infer U, any> ? U : never;
/**
 * Returns the `TextType` generic from {@link RichTextMapSerializerFunction}.
 *
 * @typeParam T - The `RichTextMapSerializerFunction` containing the needed
 *   `TextType` generic.
 */
declare type ExtractTextTypeGeneric<T> = T extends RichTextMapSerializerFunction<any, any, infer U> ? U : never;

/**
 * The return type of `asHTML()`.
 */
declare type AsHTMLReturnType<Field extends RichTextField | null | undefined> = Field extends RichTextField ? string : null;
/**
 * Serializes a rich text or title field to an HTML string
 *
 * @param richTextField - A rich text or title field from Prismic
 * @param linkResolver - An optional link resolver function to resolve links,
 *   without it you're expected to use the `routes` options from the API
 * @param htmlSerializer - An optional serializer, unhandled cases will fallback
 *   to the default serializer
 *
 * @returns HTML equivalent of the provided rich text or title field
 * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}
 */
declare const asHTML: <Field extends [] | [_prismicio_types.RTNode, ..._prismicio_types.RTNode[]] | null | undefined>(richTextField: Field, linkResolver?: LinkResolverFunction<string> | null | undefined, htmlSerializer?: HTMLMapSerializer | HTMLFunctionSerializer | null | undefined) => AsHTMLReturnType<Field>;

export { HTMLFunctionSerializer, HTMLMapSerializer, LinkResolverFunction$1 as LinkResolverFunction, asDate, asHTML, asLink };
//# sourceMappingURL=index.d.ts.map
