{"version":3,"file":"index.js","sources":["../../src/asDate.ts","../../src/graphql/asLink.ts","../../src/documentToLinkField.ts","../../src/asLink.ts","../../src/lib/serializerHelpers.ts","../../src/asHTML.ts"],"sourcesContent":["import type { DateField, TimestampField } from \"@prismicio/types\";\n\n/**\n * The return type of `asDate()`.\n */\ntype AsDateReturnType<\n\tField extends DateField | TimestampField | null | undefined,\n> = Field extends DateField<\"filled\"> | TimestampField<\"filled\"> ? Date : null;\n\n/**\n * Transforms a date or timestamp field into a JavaScript Date object\n *\n * @param dateOrTimestampField - A date or timestamp field from Prismic\n *\n * @returns A Date object, null if provided date is falsy\n * @see Templating date field from Prismic {@link https://prismic.io/docs/technologies/templating-date-field-javascript}\n */\nexport const asDate = <\n\tField extends DateField | TimestampField | null | undefined,\n>(\n\tdateOrTimestampField: Field,\n): AsDateReturnType<Field> => {\n\tif (!dateOrTimestampField) {\n\t\treturn null as AsDateReturnType<Field>;\n\t}\n\n\t// If field is a timestamp field...\n\tif (dateOrTimestampField.length === 24) {\n\t\t/**\n\t\t * Converts basic ISO 8601 to ECMAScript simplified ISO 8601 format for\n\t\t * browser compatibility issues\n\t\t *\n\t\t * From: YYYY-MM-DDTHH:mm:ssZ To: YYYY-MM-DDTHH:mm:ss.sssZ\n\t\t *\n\t\t * @see MDN documentation: {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#timestamp_string}\n\t\t * @see ECMAScript 2020 language specification: {@link https://262.ecma-international.org/11.0/#sec-date-time-string-format}\n\t\t * @see Related forum issue: {@link https://community.prismic.io/t/prismics-date-api/2520}\n\t\t * @see Regex101 expression: {@link https://regex101.com/r/jxyETT/1}\n\t\t */\n\t\treturn new Date(\n\t\t\tdateOrTimestampField.replace(/(\\+|-)(\\d{2})(\\d{2})$/, \".000$1$2:$3\"),\n\t\t) as AsDateReturnType<Field>;\n\t} else {\n\t\t// ...else field is a date field\n\t\treturn new Date(dateOrTimestampField) as AsDateReturnType<Field>;\n\t}\n};\n","// TODO: Migrate once fixed https://github.com/microsoft/TypeScript/issues/33079\nimport {\n\tFilledMinimalLinkToDocumentField,\n\tLinkField,\n\tLinkType,\n} from \"@prismicio/types/dist/graphql\";\nimport { LinkResolverFunction } from \"./types\";\n\n/**\n * Resolves any type of link field to a URL\n *\n * @typeParam LinkResolverLinkToDocumentField - Link resolver link to document field type\n * @typeParam LinkResolverFunctionReturnType - Link resolver function return type\n * @param linkField - Any kind of link field to resolve\n * @param linkResolver - A link resolver function, without it you're expected to\n *   use the `routes` from the API\n *\n * @returns Resolved URL, null if provided link is empty\n * @experimental\n * @see Prismic link resolver documentation: {@link https://prismic.io/docs/technologies/link-resolver-javascript}\n * @see Prismic API `routes` options documentation: {@link https://prismic.io/docs/technologies/route-resolver-nuxtjs}\n */\nexport const asLink = <\n\tLinkResolverLinkToDocumentField extends FilledMinimalLinkToDocumentField = FilledMinimalLinkToDocumentField,\n\tLinkResolverFunctionReturnType = string,\n>(\n\tlinkField: LinkField<LinkResolverLinkToDocumentField>,\n\tlinkResolver?: LinkResolverFunction<\n\t\tLinkResolverLinkToDocumentField,\n\t\tLinkResolverFunctionReturnType\n\t> | null,\n):\n\t| ReturnType<\n\t\t\tLinkResolverFunction<\n\t\t\t\tLinkResolverLinkToDocumentField,\n\t\t\t\tLinkResolverFunctionReturnType\n\t\t\t>\n\t  >\n\t| string\n\t| null => {\n\tif (!linkField) {\n\t\treturn null;\n\t}\n\n\tif (\"url\" in linkField) {\n\t\treturn linkField.url;\n\t} else if (linkField._linkType === LinkType.Document) {\n\t\treturn linkResolver ? linkResolver(linkField) : null;\n\t} else {\n\t\treturn null;\n\t}\n};\n","import {\n\tFilledLinkToDocumentField,\n\tLinkType,\n\tPrismicDocument,\n} from \"@prismicio/types\";\n\ntype SetOptional<T, Keys extends keyof T> = Omit<T, Keys> &\n\tPartial<Pick<T, Keys>>;\n\n/**\n * Converts a document into a link field, this is useful when crawling the API\n * for document links\n *\n * @typeParam TDocument - Specific interface of the provided document\n * @param prismicDocument - A document coming from Prismic\n *\n * @returns The equivalent link field to use with `asLink()`\n * @internal\n */\nexport const documentToLinkField = <\n\tTDocument extends SetOptional<PrismicDocument, \"slugs\">,\n>(\n\tprismicDocument: TDocument,\n): FilledLinkToDocumentField<\n\tTDocument[\"type\"],\n\tTDocument[\"lang\"],\n\tTDocument[\"data\"]\n> => {\n\treturn {\n\t\tlink_type: LinkType.Document,\n\t\tid: prismicDocument.id,\n\t\tuid: prismicDocument.uid ?? undefined,\n\t\ttype: prismicDocument.type,\n\t\ttags: prismicDocument.tags,\n\t\tlang: prismicDocument.lang,\n\t\turl: prismicDocument.url ?? undefined,\n\t\tslug: prismicDocument.slugs?.[0], // Slug field is not available with GraphQl\n\t\t// The REST API does not include a `data` property if the data object is empty.\n\t\t...(Object.keys(prismicDocument.data).length > 0\n\t\t\t? { data: prismicDocument.data }\n\t\t\t: {}),\n\t};\n};\n","import {\n\tFilledLinkToDocumentField,\n\tFilledLinkToMediaField,\n\tFilledLinkToWebField,\n\tLinkField,\n\tLinkType,\n\tPrismicDocument,\n} from \"@prismicio/types\";\n\nimport { documentToLinkField } from \"./documentToLinkField\";\nimport { LinkResolverFunction } from \"./types\";\n\n/**\n * The return type of `asLink()`.\n */\ntype AsLinkReturnType<\n\tLinkResolverFunctionReturnType = string,\n\tField extends LinkField | PrismicDocument | null | undefined =\n\t\t| LinkField\n\t\t| PrismicDocument\n\t\t| null\n\t\t| undefined,\n> = Field extends\n\t| FilledLinkToWebField\n\t| FilledLinkToMediaField\n\t| FilledLinkToDocumentField\n\t| PrismicDocument\n\t? LinkResolverFunctionReturnType | string | null\n\t: null;\n\n/**\n * Resolves any type of link field or document to a URL\n *\n * @typeParam LinkResolverFunctionReturnType - Link resolver function return type\n * @param linkFieldOrDocument - Any kind of link field or a document to resolve\n * @param linkResolver - An optional link resolver function, without it you're\n *   expected to use the `routes` options from the API\n *\n * @returns Resolved URL, null if provided link is empty\n * @see Prismic link resolver documentation: {@link https://prismic.io/docs/technologies/link-resolver-javascript}\n * @see Prismic API `routes` options documentation: {@link https://prismic.io/docs/technologies/route-resolver-nuxtjs}\n */\nexport const asLink = <\n\tLinkResolverFunctionReturnType = string,\n\tField extends LinkField | PrismicDocument | null | undefined =\n\t\t| LinkField\n\t\t| PrismicDocument\n\t\t| null\n\t\t| undefined,\n>(\n\tlinkFieldOrDocument: Field,\n\tlinkResolver?: LinkResolverFunction<LinkResolverFunctionReturnType> | null,\n): AsLinkReturnType<LinkResolverFunctionReturnType, Field> => {\n\tif (!linkFieldOrDocument) {\n\t\treturn null as AsLinkReturnType<LinkResolverFunctionReturnType, Field>;\n\t}\n\n\t// Converts document to link field if needed\n\tconst linkField = (\n\t\t\"link_type\" in linkFieldOrDocument\n\t\t\t? linkFieldOrDocument\n\t\t\t: documentToLinkField(linkFieldOrDocument)\n\t) as LinkField;\n\n\tswitch (linkField.link_type) {\n\t\tcase LinkType.Media:\n\t\tcase LinkType.Web:\n\t\t\treturn (\"url\" in linkField ? linkField.url : null) as AsLinkReturnType<\n\t\t\t\tLinkResolverFunctionReturnType,\n\t\t\t\tField\n\t\t\t>;\n\n\t\tcase LinkType.Document: {\n\t\t\tif (\"id\" in linkField && linkResolver) {\n\t\t\t\t// When using Link Resolver...\n\t\t\t\tconst resolvedURL = linkResolver(linkField);\n\n\t\t\t\tif (resolvedURL != null) {\n\t\t\t\t\treturn resolvedURL as AsLinkReturnType<\n\t\t\t\t\t\tLinkResolverFunctionReturnType,\n\t\t\t\t\t\tField\n\t\t\t\t\t>;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (\"url\" in linkField && linkField.url) {\n\t\t\t\t// When using Route Resolver...\n\t\t\t\treturn linkField.url as AsLinkReturnType<\n\t\t\t\t\tLinkResolverFunctionReturnType,\n\t\t\t\t\tField\n\t\t\t\t>;\n\t\t\t}\n\n\t\t\t// When empty or Link Resolver and Route Resolver are not used...\n\t\t\treturn null as AsLinkReturnType<LinkResolverFunctionReturnType, Field>;\n\t\t}\n\n\t\tcase LinkType.Any:\n\t\tdefault:\n\t\t\treturn null as AsLinkReturnType<LinkResolverFunctionReturnType, Field>;\n\t}\n};\n","import escapeHtml from \"escape-html\";\nimport {\n\tRTBlockNode,\n\tRTInlineNode,\n\tRTPreformattedNode,\n\tRTImageNode,\n\tRTEmbedNode,\n\tRTLinkNode,\n\tLinkType,\n\tRichTextNodeType,\n} from \"@prismicio/types\";\n\nimport { asLink } from \"../asLink\";\nimport { LinkResolverFunction } from \"../types\";\n\nexport const getLabel = (node: RTBlockNode | RTInlineNode): string => {\n\treturn \"data\" in node && \"label\" in node.data\n\t\t? ` class=\"${node.data.label}\"`\n\t\t: \"\";\n};\n\nexport const serializeStandardTag = (\n\ttag: string,\n\tnode: RTBlockNode | RTInlineNode,\n\tchildren: string[],\n): string => {\n\treturn `<${tag}${getLabel(node)}>${children.join(\"\")}</${tag}>`;\n};\n\nexport const serializePreFormatted = (node: RTPreformattedNode): string => {\n\treturn `<pre${getLabel(node)}>${escapeHtml(node.text)}</pre>`;\n};\n\nexport const serializeImage = (\n\tlinkResolver: LinkResolverFunction<string> | undefined | null,\n\tnode: RTImageNode,\n): string => {\n\tlet imageTag = `<img src=\"${node.url}\" alt=\"${escapeHtml(node.alt)}\"${\n\t\tnode.copyright ? ` copyright=\"${escapeHtml(node.copyright)}\"` : \"\"\n\t} />`;\n\n\t// If the image has a link, we wrap it with an anchor tag\n\tif (node.linkTo) {\n\t\timageTag = serializeHyperlink(\n\t\t\tlinkResolver,\n\t\t\t{\n\t\t\t\ttype: RichTextNodeType.hyperlink,\n\t\t\t\tdata: node.linkTo,\n\t\t\t\tstart: 0,\n\t\t\t\tend: 0,\n\t\t\t},\n\t\t\t[imageTag],\n\t\t);\n\t}\n\n\treturn `<p class=\"block-img\">${imageTag}</p>`;\n};\n\nexport const serializeEmbed = (node: RTEmbedNode): string => {\n\treturn `<div data-oembed=\"${node.oembed.embed_url}\" data-oembed-type=\"${\n\t\tnode.oembed.type\n\t}\" data-oembed-provider=\"${node.oembed.provider_name}\"${getLabel(node)}>${\n\t\tnode.oembed.html\n\t}</div>`;\n};\n\nexport const serializeHyperlink = (\n\tlinkResolver: LinkResolverFunction | undefined | null,\n\tnode: RTLinkNode,\n\tchildren: string[],\n): string => {\n\tswitch (node.data.link_type) {\n\t\tcase LinkType.Web: {\n\t\t\treturn `<a href=\"${escapeHtml(node.data.url)}\" target=\"${\n\t\t\t\tnode.data.target\n\t\t\t}\" rel=\"noopener noreferrer\"${getLabel(node)}>${children.join(\"\")}</a>`;\n\t\t}\n\n\t\tcase LinkType.Document: {\n\t\t\treturn `<a href=\"${asLink(node.data, linkResolver)}\"${getLabel(\n\t\t\t\tnode,\n\t\t\t)}>${children.join(\"\")}</a>`;\n\t\t}\n\n\t\tcase LinkType.Media: {\n\t\t\treturn `<a href=\"${node.data.url}\"${getLabel(node)}>${children.join(\n\t\t\t\t\"\",\n\t\t\t)}</a>`;\n\t\t}\n\t}\n};\n\nexport const serializeSpan = (content?: string): string => {\n\treturn content ? escapeHtml(content).replace(/\\n/g, \"<br />\") : \"\";\n};\n","import {\n\tserialize,\n\tElement,\n\tcomposeSerializers,\n\tRichTextFunctionSerializer,\n\tRichTextMapSerializer,\n\twrapMapSerializer,\n} from \"@prismicio/richtext\";\nimport { RichTextField } from \"@prismicio/types\";\n\nimport {\n\tserializeStandardTag,\n\tserializePreFormatted,\n\tserializeImage,\n\tserializeEmbed,\n\tserializeHyperlink,\n\tserializeSpan,\n} from \"./lib/serializerHelpers\";\nimport {\n\tHTMLFunctionSerializer,\n\tHTMLMapSerializer,\n\tLinkResolverFunction,\n} from \"./types\";\n\n/**\n * Creates a default HTML serializer with a given Link Resolver providing\n * sensible and safe defaults for every node type\n *\n * @internal\n */\nconst createDefaultHTMLSerializer = (\n\tlinkResolver: LinkResolverFunction<string> | undefined | null,\n): RichTextFunctionSerializer<string> => {\n\treturn (_type, node, text, children, _key) => {\n\t\tswitch (node.type) {\n\t\t\tcase Element.heading1:\n\t\t\t\treturn serializeStandardTag(\"h1\", node, children);\n\t\t\tcase Element.heading2:\n\t\t\t\treturn serializeStandardTag(\"h2\", node, children);\n\t\t\tcase Element.heading3:\n\t\t\t\treturn serializeStandardTag(\"h3\", node, children);\n\t\t\tcase Element.heading4:\n\t\t\t\treturn serializeStandardTag(\"h4\", node, children);\n\t\t\tcase Element.heading5:\n\t\t\t\treturn serializeStandardTag(\"h5\", node, children);\n\t\t\tcase Element.heading6:\n\t\t\t\treturn serializeStandardTag(\"h6\", node, children);\n\t\t\tcase Element.paragraph:\n\t\t\t\treturn serializeStandardTag(\"p\", node, children);\n\t\t\tcase Element.preformatted:\n\t\t\t\treturn serializePreFormatted(node);\n\t\t\tcase Element.strong:\n\t\t\t\treturn serializeStandardTag(\"strong\", node, children);\n\t\t\tcase Element.em:\n\t\t\t\treturn serializeStandardTag(\"em\", node, children);\n\t\t\tcase Element.listItem:\n\t\t\t\treturn serializeStandardTag(\"li\", node, children);\n\t\t\tcase Element.oListItem:\n\t\t\t\treturn serializeStandardTag(\"li\", node, children);\n\t\t\tcase Element.list:\n\t\t\t\treturn serializeStandardTag(\"ul\", node, children);\n\t\t\tcase Element.oList:\n\t\t\t\treturn serializeStandardTag(\"ol\", node, children);\n\t\t\tcase Element.image:\n\t\t\t\treturn serializeImage(linkResolver, node);\n\t\t\tcase Element.embed:\n\t\t\t\treturn serializeEmbed(node);\n\t\t\tcase Element.hyperlink:\n\t\t\t\treturn serializeHyperlink(linkResolver, node, children);\n\t\t\tcase Element.label:\n\t\t\t\treturn serializeStandardTag(\"span\", node, children);\n\t\t\tcase Element.span:\n\t\t\tdefault:\n\t\t\t\treturn serializeSpan(text);\n\t\t}\n\t};\n};\n\n/**\n * Wraps a map serializer into a regular function serializer. The given map\n * serializer should accept children as a string, not as an array of strings\n * like `@prismicio/richtext`'s `wrapMapSerializer`.\n *\n * @param mapSerializer - Map serializer to wrap\n *\n * @returns A regular function serializer\n */\nconst wrapMapSerializerWithStringChildren = (\n\tmapSerializer: HTMLMapSerializer,\n): RichTextFunctionSerializer<string> => {\n\tconst modifiedMapSerializer = {} as RichTextMapSerializer<string>;\n\n\tfor (const tag in mapSerializer) {\n\t\tconst tagSerializer = mapSerializer[tag as keyof typeof mapSerializer];\n\n\t\tif (tagSerializer) {\n\t\t\tmodifiedMapSerializer[tag as keyof typeof mapSerializer] = (payload) => {\n\t\t\t\treturn tagSerializer({\n\t\t\t\t\t...payload,\n\t\t\t\t\t// @ts-expect-error - merging blockSerializer types causes TS to bail to a never type\n\t\t\t\t\tchildren: payload.children.join(\"\"),\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\t}\n\n\treturn wrapMapSerializer(modifiedMapSerializer);\n};\n\n/**\n * The return type of `asHTML()`.\n */\ntype AsHTMLReturnType<Field extends RichTextField | null | undefined> =\n\tField extends RichTextField ? string : null;\n\n/**\n * Serializes a rich text or title field to an HTML string\n *\n * @param richTextField - A rich text or title field from Prismic\n * @param linkResolver - An optional link resolver function to resolve links,\n *   without it you're expected to use the `routes` options from the API\n * @param htmlSerializer - An optional serializer, unhandled cases will fallback\n *   to the default serializer\n *\n * @returns HTML equivalent of the provided rich text or title field\n * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}\n */\nexport const asHTML = <Field extends RichTextField | null | undefined>(\n\trichTextField: Field,\n\tlinkResolver?: LinkResolverFunction<string> | null,\n\thtmlSerializer?: HTMLFunctionSerializer | HTMLMapSerializer | null,\n): AsHTMLReturnType<Field> => {\n\tif (richTextField) {\n\t\tlet serializer: RichTextFunctionSerializer<string>;\n\t\tif (htmlSerializer) {\n\t\t\tserializer = composeSerializers(\n\t\t\t\ttypeof htmlSerializer === \"object\"\n\t\t\t\t\t? wrapMapSerializerWithStringChildren(htmlSerializer)\n\t\t\t\t\t: (type, node, text, children, key) =>\n\t\t\t\t\t\t\thtmlSerializer(type, node, text, children.join(\"\"), key),\n\t\t\t\tcreateDefaultHTMLSerializer(linkResolver),\n\t\t\t);\n\t\t} else {\n\t\t\tserializer = createDefaultHTMLSerializer(linkResolver);\n\t\t}\n\n\t\treturn serialize(richTextField, serializer).join(\n\t\t\t\"\",\n\t\t) as AsHTMLReturnType<Field>;\n\t} else {\n\t\treturn null as AsHTMLReturnType<Field>;\n\t}\n};\n"],"names":["asLink","LinkType","escapeHtml","RichTextNodeType","Element","wrapMapSerializer","composeSerializers","serialize"],"mappings":"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"}