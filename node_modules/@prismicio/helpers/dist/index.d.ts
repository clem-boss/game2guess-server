import * as _prismicio_types from '@prismicio/types';
import { DateField, TimestampField, FilledLinkToDocumentField, PrismicDocument, FilledLinkToWebField, FilledLinkToMediaField, LinkField, RichTextField, ImageFieldImage, TitleField, AnyRegularField, Slice, SharedSlice, LinkToMediaField, ColorField, NumberField, KeyTextField, AnyOEmbed, GeoPointField } from '@prismicio/types';
import { RichTextFunctionSerializer, RichTextMapSerializer, RichTextMapSerializerFunction } from '@prismicio/richtext';
export { Element } from '@prismicio/richtext';
import { ImgixURLParams, BuildWidthSrcSetParams, BuildPixelDensitySrcSetParams } from 'imgix-url-builder';

/**
 * The return type of `asDate()`.
 */
declare type AsDateReturnType<Field extends DateField | TimestampField | null | undefined> = Field extends DateField<"filled"> | TimestampField<"filled"> ? Date : null;
/**
 * Transforms a date or timestamp field into a JavaScript Date object
 *
 * @param dateOrTimestampField - A date or timestamp field from Prismic
 *
 * @returns A Date object, null if provided date is falsy
 * @see Templating date field from Prismic {@link https://prismic.io/docs/technologies/templating-date-field-javascript}
 */
declare const asDate: <Field extends `${number}-${number}-${number}` | `${number}-${number}-${number}T${number}:${number}:${number}+${number}` | null | undefined>(dateOrTimestampField: Field) => AsDateReturnType<Field>;

/**
 * Resolves a link to a Prismic document to a URL
 *
 * @typeParam ReturnType - Return type of your link resolver function, useful if
 *   you prefer to return a complex object
 * @param linkToDocumentField - A document link field to resolve
 *
 * @returns Resolved URL
 * @see Prismic link resolver documentation: {@link https://prismic.io/docs/technologies/link-resolver-javascript}
 */
declare type LinkResolverFunction<ReturnType = string> = (linkToDocumentField: FilledLinkToDocumentField) => ReturnType;
/**
 * Serializes a node from a rich text or title field with a function to HTML
 *
 * Unlike a typical `@prismicio/richtext` function serializer, this serializer
 * converts the `children` argument to a single string rather than an array of strings.
 *
 * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}
 */
declare type HTMLFunctionSerializer = (type: Parameters<RichTextFunctionSerializer<string>>[0], node: Parameters<RichTextFunctionSerializer<string>>[1], text: Parameters<RichTextFunctionSerializer<string>>[2], children: Parameters<RichTextFunctionSerializer<string>>[3][number], key: Parameters<RichTextFunctionSerializer<string>>[4]) => string | null | undefined;
/**
 * Serializes a node from a rich text or title field with a map to HTML
 *
 * Unlike a typical `@prismicio/richtext` map serializer, this serializer
 * converts the `children` property to a single string rather than an array of strings.
 *
 * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}
 */
declare type HTMLMapSerializer = {
    [P in keyof RichTextMapSerializer<string>]: (payload: {
        type: Parameters<HTMLMapSerializerFunction<P>>[0]["type"];
        node: Parameters<HTMLMapSerializerFunction<P>>[0]["node"];
        text: Parameters<HTMLMapSerializerFunction<P>>[0]["text"];
        children: Parameters<HTMLMapSerializerFunction<P>>[0]["children"][number];
        key: Parameters<HTMLMapSerializerFunction<P>>[0]["key"];
    }) => string | null | undefined;
};
/**
 * A {@link RichTextMapSerializerFunction} type specifically for {@link HTMLMapSerializer}.
 *
 * @typeParam BlockName - The serializer's Rich Text block type.
 */
declare type HTMLMapSerializerFunction<BlockType extends keyof RichTextMapSerializer<string>> = RichTextMapSerializerFunction<string, ExtractNodeGeneric<RichTextMapSerializer<string>[BlockType]>, ExtractTextTypeGeneric<RichTextMapSerializer<string>[BlockType]>>;
/**
 * Returns the `Node` generic from {@link RichTextMapSerializerFunction}.
 *
 * @typeParam T - The `RichTextMapSerializerFunction` containing the needed
 *   `Node` generic.
 */
declare type ExtractNodeGeneric<T> = T extends RichTextMapSerializerFunction<any, infer U, any> ? U : never;
/**
 * Returns the `TextType` generic from {@link RichTextMapSerializerFunction}.
 *
 * @typeParam T - The `RichTextMapSerializerFunction` containing the needed
 *   `TextType` generic.
 */
declare type ExtractTextTypeGeneric<T> = T extends RichTextMapSerializerFunction<any, any, infer U> ? U : never;

/**
 * The return type of `asLink()`.
 */
declare type AsLinkReturnType<LinkResolverFunctionReturnType = string, Field extends LinkField | PrismicDocument | null | undefined = LinkField | PrismicDocument | null | undefined> = Field extends FilledLinkToWebField | FilledLinkToMediaField | FilledLinkToDocumentField | PrismicDocument ? LinkResolverFunctionReturnType | string | null : null;
/**
 * Resolves any type of link field or document to a URL
 *
 * @typeParam LinkResolverFunctionReturnType - Link resolver function return type
 * @param linkFieldOrDocument - Any kind of link field or a document to resolve
 * @param linkResolver - An optional link resolver function, without it you're
 *   expected to use the `routes` options from the API
 *
 * @returns Resolved URL, null if provided link is empty
 * @see Prismic link resolver documentation: {@link https://prismic.io/docs/technologies/link-resolver-javascript}
 * @see Prismic API `routes` options documentation: {@link https://prismic.io/docs/technologies/route-resolver-nuxtjs}
 */
declare const asLink: <LinkResolverFunctionReturnType = string, Field extends PrismicDocument<Record<string, any>, string, string> | FilledLinkToDocumentField<string, string, never> | _prismicio_types.EmptyLinkField<"Any"> | FilledLinkToWebField | FilledLinkToMediaField | null | undefined = PrismicDocument<Record<string, any>, string, string> | FilledLinkToDocumentField<string, string, never> | _prismicio_types.EmptyLinkField<"Any"> | FilledLinkToWebField | FilledLinkToMediaField | null | undefined>(linkFieldOrDocument: Field, linkResolver?: LinkResolverFunction<LinkResolverFunctionReturnType> | null | undefined) => AsLinkReturnType<LinkResolverFunctionReturnType, Field>;

/**
 * The return type of `asText()`.
 */
declare type AsTextReturnType<Field extends RichTextField | null | undefined> = Field extends RichTextField ? string : null;
/**
 * Serializes a rich text or title field to a plain text string
 *
 * @param richTextField - A rich text or title field from Prismic
 * @param separator - Separator used to join each element, defaults to a space
 *
 * @returns Plain text equivalent of the provided rich text or title field
 * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}
 */
declare const asText: <Field extends [] | [_prismicio_types.RTNode, ..._prismicio_types.RTNode[]] | null | undefined>(richTextField: Field, separator?: string | undefined) => AsTextReturnType<Field>;

/**
 * The return type of `asHTML()`.
 */
declare type AsHTMLReturnType<Field extends RichTextField | null | undefined> = Field extends RichTextField ? string : null;
/**
 * Serializes a rich text or title field to an HTML string
 *
 * @param richTextField - A rich text or title field from Prismic
 * @param linkResolver - An optional link resolver function to resolve links,
 *   without it you're expected to use the `routes` options from the API
 * @param htmlSerializer - An optional serializer, unhandled cases will fallback
 *   to the default serializer
 *
 * @returns HTML equivalent of the provided rich text or title field
 * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}
 */
declare const asHTML: <Field extends [] | [_prismicio_types.RTNode, ..._prismicio_types.RTNode[]] | null | undefined>(richTextField: Field, linkResolver?: LinkResolverFunction<string> | null | undefined, htmlSerializer?: HTMLMapSerializer | HTMLFunctionSerializer | null | undefined) => AsHTMLReturnType<Field>;

/**
 * The return type of `asImageSrc()`.
 */
declare type AsImageSrcReturnType<Field extends ImageFieldImage | null | undefined> = Field extends ImageFieldImage<"filled"> ? string : null;
/**
 * Returns the URL of an Image field with optional image transformations (via
 * Imgix URL parameters).
 *
 * @example
 *
 * ```ts
 * const src = asImageSrc(document.data.imageField, { sat: -100 });
 * // => https://images.prismic.io/repo/image.png?sat=-100
 * ```
 *
 * @param field - Image field (or one of its responsive views) from which to get
 *   an image URL.
 * @param params - An object of Imgix URL API parameters to transform the image.
 *
 * @returns The Image field's image URL with transformations applied (if given).
 *   If the Image field is empty, `null` is returned.
 * @see Imgix URL parameters reference: https://docs.imgix.com/apis/rendering
 */
declare const asImageSrc: <Field extends _prismicio_types.EmptyImageFieldImage | _prismicio_types.FilledImageFieldImage | null | undefined>(field: Field, params?: ImgixURLParams) => AsImageSrcReturnType<Field>;

/**
 * The return type of `asImageWidthSrcSet()`.
 */
declare type AsImageWidthSrcSetReturnType<Field extends ImageFieldImage | null | undefined> = Field extends ImageFieldImage<"filled"> ? {
    /**
     * The Image field's image URL with Imgix URL parameters (if given).
     */
    src: string;
    /**
     * A width-based `srcset` attribute value for the Image field's image with
     * Imgix URL parameters (if given).
     */
    srcset: string;
} : null;
/**
 * Configuration for `asImageWidthSrcSet()`.
 */
declare type AsImageWidthSrcSetConfig = Omit<BuildWidthSrcSetParams, "widths"> & {
    widths?: "thumbnails" | BuildWidthSrcSetParams["widths"];
};
/**
 * Creates a width-based `srcset` from an Image field with optional image
 * transformations (via Imgix URL parameters).
 *
 * If a `widths` parameter is not given, the following widths will be used by
 * default: 640, 750, 828, 1080, 1200, 1920, 2048, 3840.
 *
 * If the Image field contains responsive views, each responsive view can be
 * used as a width in the resulting `srcset` by passing `"thumbnails"` as the
 * `widths` parameter.
 *
 * @example
 *
 * ```ts
 * const srcset = asImageWidthSrcSet(document.data.imageField, {
 * 	widths: [400, 800, 1600],
 * 	sat: -100,
 * });
 * // => {
 * //   src:    'https://images.prismic.io/repo/image.png?sat=-100',
 * //   srcset: 'https://images.prismic.io/repo/image.png?sat=-100&width=400 400w, ' +
 * //           'https://images.prismic.io/repo/image.png?sat=-100&width=800 800w,' +
 * //           'https://images.prismic.io/repo/image.png?sat=-100&width=1600 1600w'
 * // }
 * ```
 *
 * @param field - Image field (or one of its responsive views) from which to get
 *   an image URL.
 * @param params - An object of Imgix URL API parameters. The `widths` parameter
 *   defines the resulting `srcset` widths. Pass `"thumbnails"` to automatically
 *   use the field's responsive views.
 *
 * @returns A `srcset` attribute value for the Image field with Imgix URL
 *   parameters (if given). If the Image field is empty, `null` is returned.
 * @see Imgix URL parameters reference: https://docs.imgix.com/apis/rendering
 */
declare const asImageWidthSrcSet: <Field extends _prismicio_types.EmptyImageFieldImage | _prismicio_types.FilledImageFieldImage | null | undefined>(field: Field, params?: AsImageWidthSrcSetConfig) => AsImageWidthSrcSetReturnType<Field>;

/**
 * Configuration for `asImagePixelDensitySrcSet()`.
 */
declare type AsImagePixelDensitySrcSetConfig = Omit<BuildPixelDensitySrcSetParams, "pixelDensities"> & Partial<Pick<BuildPixelDensitySrcSetParams, "pixelDensities">>;
/**
 * The return type of `asImagePixelDensitySrcSet()`.
 */
declare type AsImagePixelDensitySrcSetReturnType<Field extends ImageFieldImage | null | undefined> = Field extends ImageFieldImage<"filled"> ? {
    /**
     * The Image field's image URL with Imgix URL parameters (if given).
     */
    src: string;
    /**
     * A pixel-densitye-based `srcset` attribute value for the Image field's
     * image with Imgix URL parameters (if given).
     */
    srcset: string;
} : null;
/**
 * Creates a pixel-density-based `srcset` from an Image field with optional
 * image transformations (via Imgix URL parameters).
 *
 * If a `pixelDensities` parameter is not given, the following pixel densities
 * will be used by default: 1, 2, 3.
 *
 * @example
 *
 * ```ts
 * const srcset = asImagePixelDensitySrcSet(document.data.imageField, {
 * 	pixelDensities: [1, 2],
 * 	sat: -100,
 * });
 * // => {
 * //   src:    'https://images.prismic.io/repo/image.png?sat=-100',
 * //   srcset: 'https://images.prismic.io/repo/image.png?sat=-100&dpr=1 1x, ' +
 * //           'https://images.prismic.io/repo/image.png?sat=-100&dpr=2 2x'
 * // }
 * ```
 *
 * @param field - Image field (or one of its responsive views) from which to get
 *   an image URL.
 * @param params - An object of Imgix URL API parameters. The `pixelDensities`
 *   parameter defines the resulting `srcset` widths.
 *
 * @returns A `srcset` attribute value for the Image field with Imgix URL
 *   parameters (if given). If the Image field is empty, `null` is returned.
 * @see Imgix URL parameters reference: https://docs.imgix.com/apis/rendering
 */
declare const asImagePixelDensitySrcSet: <Field extends _prismicio_types.EmptyImageFieldImage | _prismicio_types.FilledImageFieldImage | null | undefined>(field: Field, params?: AsImagePixelDensitySrcSetConfig) => AsImagePixelDensitySrcSetReturnType<Field>;

/**
 * Determines if a Rich Text field is filled.
 *
 * @param field - Rich Text field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
declare const richText: (field: RichTextField | null | undefined) => field is [_prismicio_types.RTNode, ..._prismicio_types.RTNode[]];
/**
 * Determines if a Title field is filled.
 *
 * @param field - Title field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
declare const title: (field: TitleField | null | undefined) => field is [Omit<_prismicio_types.RTHeading1Node | _prismicio_types.RTHeading2Node | _prismicio_types.RTHeading3Node | _prismicio_types.RTHeading4Node | _prismicio_types.RTHeading5Node | _prismicio_types.RTHeading6Node, "spans"> & {
    spans: [];
}];
/**
 * Determines if an Image thumbnail is filled.
 *
 * @param thumbnail - Image thumbnail to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
declare const imageThumbnail: (thumbnail: ImageFieldImage | null | undefined) => thumbnail is _prismicio_types.FilledImageFieldImage;
/**
 * Determines if an Image field is filled.
 *
 * @param field - Image field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
declare const image: <Field extends {
    url?: null | undefined;
    dimensions?: null | undefined;
    alt?: null | undefined;
    copyright?: null | undefined;
} | {
    url: string;
    dimensions: {
        width: number;
        height: number;
    };
    alt: string | null;
    copyright: string | null;
}, ThumbnailNames extends Exclude<keyof Field, number | symbol | "url" | "dimensions" | "alt" | "copyright">>(field: Field | ({ [P in keyof (_prismicio_types.EmptyImageFieldImage & Record<ThumbnailNames extends string ? Exclude<ThumbnailNames, "url" | "dimensions" | "alt" | "copyright"> : never, _prismicio_types.EmptyImageFieldImage | _prismicio_types.FilledImageFieldImage>)]: (_prismicio_types.EmptyImageFieldImage & Record<ThumbnailNames extends string ? Exclude<ThumbnailNames, "url" | "dimensions" | "alt" | "copyright"> : never, _prismicio_types.EmptyImageFieldImage | _prismicio_types.FilledImageFieldImage>)[P]; } | { [P_1 in keyof (_prismicio_types.FilledImageFieldImage & Record<ThumbnailNames extends string ? Exclude<ThumbnailNames, "url" | "dimensions" | "alt" | "copyright"> : never, _prismicio_types.EmptyImageFieldImage | _prismicio_types.FilledImageFieldImage>)]: (_prismicio_types.FilledImageFieldImage & Record<ThumbnailNames extends string ? Exclude<ThumbnailNames, "url" | "dimensions" | "alt" | "copyright"> : never, _prismicio_types.EmptyImageFieldImage | _prismicio_types.FilledImageFieldImage>)[P_1]; }) | null | undefined) => field is { [P_2 in keyof (_prismicio_types.FilledImageFieldImage & Record<ThumbnailNames extends string ? Exclude<ThumbnailNames, "url" | "dimensions" | "alt" | "copyright"> : never, _prismicio_types.FilledImageFieldImage>)]: (_prismicio_types.FilledImageFieldImage & Record<ThumbnailNames extends string ? Exclude<ThumbnailNames, "url" | "dimensions" | "alt" | "copyright"> : never, _prismicio_types.FilledImageFieldImage>)[P_2]; };
/**
 * Determines if a Link field is filled.
 *
 * @param field - Link field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
declare const link: <TypeEnum = string, LangEnum = string, DataInterface extends Record<string, AnyRegularField | [Record<string, AnyRegularField>, ...Record<string, AnyRegularField>[]] | [Slice<string, Record<string, AnyRegularField>, Record<string, AnyRegularField>> | SharedSlice<string, _prismicio_types.SharedSliceVariation<string, Record<string, AnyRegularField>, Record<string, AnyRegularField>>>, ...(Slice<string, Record<string, AnyRegularField>, Record<string, AnyRegularField>> | SharedSlice<string, _prismicio_types.SharedSliceVariation<string, Record<string, AnyRegularField>, Record<string, AnyRegularField>>>)[]]> = never>(field: _prismicio_types.EmptyLinkField<"Any"> | _prismicio_types.FilledLinkToWebField | _prismicio_types.FilledLinkToMediaField | _prismicio_types.FilledLinkToDocumentField<TypeEnum, LangEnum, DataInterface> | null | undefined) => field is _prismicio_types.FilledLinkToWebField | _prismicio_types.FilledLinkToMediaField | _prismicio_types.FilledLinkToDocumentField<TypeEnum, LangEnum, DataInterface>;
/**
 * Determines if a Link to Media field is filled.
 *
 * @param field - Link to Media field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
declare const linkToMedia: (field: LinkToMediaField | null | undefined) => field is _prismicio_types.FilledLinkToMediaField;
/**
 * Determines if a Content Relationship field is filled.
 *
 * @param field - Content Relationship field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
declare const contentRelationship: <TypeEnum = string, LangEnum = string, DataInterface extends Record<string, AnyRegularField | [Record<string, AnyRegularField>, ...Record<string, AnyRegularField>[]] | [Slice<string, Record<string, AnyRegularField>, Record<string, AnyRegularField>> | SharedSlice<string, _prismicio_types.SharedSliceVariation<string, Record<string, AnyRegularField>, Record<string, AnyRegularField>>>, ...(Slice<string, Record<string, AnyRegularField>, Record<string, AnyRegularField>> | SharedSlice<string, _prismicio_types.SharedSliceVariation<string, Record<string, AnyRegularField>, Record<string, AnyRegularField>>>)[]]> = never>(field: _prismicio_types.EmptyLinkField<"Document"> | _prismicio_types.FilledLinkToDocumentField<TypeEnum, LangEnum, DataInterface> | null | undefined) => field is _prismicio_types.FilledLinkToDocumentField<TypeEnum, LangEnum, DataInterface>;
/**
 * Determines if a Date field is filled.
 *
 * @param field - Date field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
declare const date: (field: DateField | null | undefined) => field is `${number}-${number}-${number}`;
/**
 * Determines if a Timestamp field is filled.
 *
 * @param field - Timestamp field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
declare const timestamp: (field: TimestampField | null | undefined) => field is `${number}-${number}-${number}T${number}:${number}:${number}+${number}`;
/**
 * Determines if a Color field is filled.
 *
 * @param field - Color field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
declare const color: (field: ColorField | null | undefined) => field is `#${string}`;
/**
 * Determines if a Number field is filled.
 *
 * @param field - Number field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
declare const number: (field: NumberField | null | undefined) => field is number;
/**
 * Determines if a Key Text field is filled.
 *
 * @param field - Key Text field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
declare const keyText: (field: KeyTextField | null | undefined) => field is string;
/**
 * Determines if a Select field is filled.
 *
 * @param field - Select field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
declare const select: <Enum extends string>(field: Enum | null | undefined) => field is Enum;
/**
 * Determines if an Embed field is filled.
 *
 * @param field - Embed field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
declare const embed: <Field extends {
    [x: string]: never;
} | (AnyOEmbed & {
    embed_url: string;
    html: string | null;
})>(field: (Field extends {
    [x: string]: never;
} | (infer Data & {
    embed_url: string;
    html: string | null;
}) ? {
    [x: string]: never;
} | (Data & {
    embed_url: string;
    html: string | null;
}) : never) | null | undefined) => field is Field extends {
    [x: string]: never;
} | (infer Data_1 & {
    embed_url: string;
    html: string | null;
}) ? Data_1 & {
    embed_url: string;
    html: string | null;
} : never;
/**
 * Determines if a GeoPoint field is filled.
 *
 * @param field - GeoPoint field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
declare const geoPoint: (field: GeoPointField | null | undefined) => field is {
    latitude: number;
    longitude: number;
};
/**
 * Determines if an Integration Fields field is filled.
 *
 * @param field - Integration Fields field to check.
 *
 * @returns `true` if `field` is filled, `false` otherwise.
 */
declare const integrationFields: <Blob_1>(field: {
    id: string;
    title?: string | undefined;
    description?: string | undefined;
    image_url?: string | undefined;
    last_update: number;
    blob: Blob_1;
} | null | undefined) => field is {
    id: string;
    title?: string | undefined;
    description?: string | undefined;
    image_url?: string | undefined;
    last_update: number;
    blob: Blob_1;
};
/**
 * Determines if a Group has at least one item.
 *
 * @param group - Group to check.
 *
 * @returns `true` if `group` contains at least one item, `false` otherwise.
 */
declare const group: <Fields extends Record<string, AnyRegularField>>(group: [] | [Fields, ...Fields[]] | null | undefined) => group is [Fields, ...Fields[]];
/**
 * Determines if a Slice Zone has at least one Slice.
 *
 * @param slices - Slice Zone to check.
 *
 * @returns `true` if `slices` contains at least one Slice, `false` otherwise.
 */
declare const sliceZone: <Slices extends Slice<string, Record<string, AnyRegularField>, Record<string, AnyRegularField>> | SharedSlice<string, _prismicio_types.SharedSliceVariation<string, Record<string, AnyRegularField>, Record<string, AnyRegularField>>>>(slices: [] | [Slices, ...Slices[]] | null | undefined) => slices is [Slices, ...Slices[]];

declare const isFilled_richText: typeof richText;
declare const isFilled_title: typeof title;
declare const isFilled_imageThumbnail: typeof imageThumbnail;
declare const isFilled_image: typeof image;
declare const isFilled_link: typeof link;
declare const isFilled_linkToMedia: typeof linkToMedia;
declare const isFilled_contentRelationship: typeof contentRelationship;
declare const isFilled_date: typeof date;
declare const isFilled_timestamp: typeof timestamp;
declare const isFilled_color: typeof color;
declare const isFilled_number: typeof number;
declare const isFilled_keyText: typeof keyText;
declare const isFilled_select: typeof select;
declare const isFilled_embed: typeof embed;
declare const isFilled_geoPoint: typeof geoPoint;
declare const isFilled_integrationFields: typeof integrationFields;
declare const isFilled_group: typeof group;
declare const isFilled_sliceZone: typeof sliceZone;
declare namespace isFilled {
  export {
    isFilled_richText as richText,
    isFilled_title as title,
    isFilled_imageThumbnail as imageThumbnail,
    isFilled_image as image,
    isFilled_link as link,
    isFilled_linkToMedia as linkToMedia,
    isFilled_contentRelationship as contentRelationship,
    isFilled_date as date,
    isFilled_timestamp as timestamp,
    isFilled_color as color,
    isFilled_number as number,
    isFilled_keyText as keyText,
    isFilled_select as select,
    isFilled_embed as embed,
    isFilled_geoPoint as geoPoint,
    isFilled_integrationFields as integrationFields,
    isFilled_group as group,
    isFilled_sliceZone as sliceZone,
  };
}

declare type SetOptional<T, Keys extends keyof T> = Omit<T, Keys> & Partial<Pick<T, Keys>>;
/**
 * Converts a document into a link field, this is useful when crawling the API
 * for document links
 *
 * @typeParam TDocument - Specific interface of the provided document
 * @param prismicDocument - A document coming from Prismic
 *
 * @returns The equivalent link field to use with `asLink()`
 * @internal
 */
declare const documentToLinkField: <TDocument extends SetOptional<PrismicDocument<Record<string, any>, string, string>, "slugs">>(prismicDocument: TDocument) => FilledLinkToDocumentField<TDocument["type"], TDocument["lang"], TDocument["data"]>;

/**
 * @deprecated Renamed to `Element` (without an "s").
 */
declare const Elements: {
    readonly heading1: "heading1";
    readonly heading2: "heading2";
    readonly heading3: "heading3";
    readonly heading4: "heading4";
    readonly heading5: "heading5";
    readonly heading6: "heading6";
    readonly paragraph: "paragraph";
    readonly preformatted: "preformatted";
    readonly strong: "strong";
    readonly em: "em";
    readonly listItem: "list-item";
    readonly oListItem: "o-list-item";
    readonly list: "group-list-item";
    readonly oList: "group-o-list-item";
    readonly image: "image";
    readonly embed: "embed";
    readonly hyperlink: "hyperlink";
    readonly label: "label";
    readonly span: "span";
};

export { Elements, HTMLFunctionSerializer, HTMLMapSerializer, LinkResolverFunction, asDate, asHTML, asImagePixelDensitySrcSet, asImageSrc, asImageWidthSrcSet, asLink, asText, documentToLinkField, isFilled };
