'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const types = require('@prismicio/types');
const richtext = require('@prismicio/richtext');
const escapeHtml = require('escape-html');
const imgixUrlBuilder = require('imgix-url-builder');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

const escapeHtml__default = /*#__PURE__*/_interopDefaultLegacy(escapeHtml);

const asDate = (dateOrTimestampField) => {
  if (!dateOrTimestampField) {
    return null;
  }
  if (dateOrTimestampField.length === 24) {
    return new Date(dateOrTimestampField.replace(/(\+|-)(\d{2})(\d{2})$/, ".000$1$2:$3"));
  } else {
    return new Date(dateOrTimestampField);
  }
};

const documentToLinkField = (prismicDocument) => {
  var _a, _b, _c;
  return {
    link_type: types.LinkType.Document,
    id: prismicDocument.id,
    uid: (_a = prismicDocument.uid) != null ? _a : void 0,
    type: prismicDocument.type,
    tags: prismicDocument.tags,
    lang: prismicDocument.lang,
    url: (_b = prismicDocument.url) != null ? _b : void 0,
    slug: (_c = prismicDocument.slugs) == null ? void 0 : _c[0],
    ...Object.keys(prismicDocument.data).length > 0 ? { data: prismicDocument.data } : {}
  };
};

const asLink = (linkFieldOrDocument, linkResolver) => {
  if (!linkFieldOrDocument) {
    return null;
  }
  const linkField = "link_type" in linkFieldOrDocument ? linkFieldOrDocument : documentToLinkField(linkFieldOrDocument);
  switch (linkField.link_type) {
    case types.LinkType.Media:
    case types.LinkType.Web:
      return "url" in linkField ? linkField.url : null;
    case types.LinkType.Document: {
      if ("id" in linkField && linkResolver) {
        const resolvedURL = linkResolver(linkField);
        if (resolvedURL != null) {
          return resolvedURL;
        }
      }
      if ("url" in linkField && linkField.url) {
        return linkField.url;
      }
      return null;
    }
    case types.LinkType.Any:
    default:
      return null;
  }
};

const asText = (richTextField, separator) => {
  if (richTextField) {
    return richtext.asText(richTextField, separator);
  } else {
    return null;
  }
};

const getLabel = (node) => {
  return "data" in node && "label" in node.data ? ` class="${node.data.label}"` : "";
};
const serializeStandardTag = (tag, node, children) => {
  return `<${tag}${getLabel(node)}>${children.join("")}</${tag}>`;
};
const serializePreFormatted = (node) => {
  return `<pre${getLabel(node)}>${escapeHtml__default["default"](node.text)}</pre>`;
};
const serializeImage = (linkResolver, node) => {
  let imageTag = `<img src="${node.url}" alt="${escapeHtml__default["default"](node.alt)}"${node.copyright ? ` copyright="${escapeHtml__default["default"](node.copyright)}"` : ""} />`;
  if (node.linkTo) {
    imageTag = serializeHyperlink(linkResolver, {
      type: types.RichTextNodeType.hyperlink,
      data: node.linkTo,
      start: 0,
      end: 0
    }, [imageTag]);
  }
  return `<p class="block-img">${imageTag}</p>`;
};
const serializeEmbed = (node) => {
  return `<div data-oembed="${node.oembed.embed_url}" data-oembed-type="${node.oembed.type}" data-oembed-provider="${node.oembed.provider_name}"${getLabel(node)}>${node.oembed.html}</div>`;
};
const serializeHyperlink = (linkResolver, node, children) => {
  switch (node.data.link_type) {
    case types.LinkType.Web: {
      return `<a href="${escapeHtml__default["default"](node.data.url)}" target="${node.data.target}" rel="noopener noreferrer"${getLabel(node)}>${children.join("")}</a>`;
    }
    case types.LinkType.Document: {
      return `<a href="${asLink(node.data, linkResolver)}"${getLabel(node)}>${children.join("")}</a>`;
    }
    case types.LinkType.Media: {
      return `<a href="${node.data.url}"${getLabel(node)}>${children.join("")}</a>`;
    }
  }
};
const serializeSpan = (content) => {
  return content ? escapeHtml__default["default"](content).replace(/\n/g, "<br />") : "";
};

const createDefaultHTMLSerializer = (linkResolver) => {
  return (_type, node, text, children, _key) => {
    switch (node.type) {
      case richtext.Element.heading1:
        return serializeStandardTag("h1", node, children);
      case richtext.Element.heading2:
        return serializeStandardTag("h2", node, children);
      case richtext.Element.heading3:
        return serializeStandardTag("h3", node, children);
      case richtext.Element.heading4:
        return serializeStandardTag("h4", node, children);
      case richtext.Element.heading5:
        return serializeStandardTag("h5", node, children);
      case richtext.Element.heading6:
        return serializeStandardTag("h6", node, children);
      case richtext.Element.paragraph:
        return serializeStandardTag("p", node, children);
      case richtext.Element.preformatted:
        return serializePreFormatted(node);
      case richtext.Element.strong:
        return serializeStandardTag("strong", node, children);
      case richtext.Element.em:
        return serializeStandardTag("em", node, children);
      case richtext.Element.listItem:
        return serializeStandardTag("li", node, children);
      case richtext.Element.oListItem:
        return serializeStandardTag("li", node, children);
      case richtext.Element.list:
        return serializeStandardTag("ul", node, children);
      case richtext.Element.oList:
        return serializeStandardTag("ol", node, children);
      case richtext.Element.image:
        return serializeImage(linkResolver, node);
      case richtext.Element.embed:
        return serializeEmbed(node);
      case richtext.Element.hyperlink:
        return serializeHyperlink(linkResolver, node, children);
      case richtext.Element.label:
        return serializeStandardTag("span", node, children);
      case richtext.Element.span:
      default:
        return serializeSpan(text);
    }
  };
};
const wrapMapSerializerWithStringChildren = (mapSerializer) => {
  const modifiedMapSerializer = {};
  for (const tag in mapSerializer) {
    const tagSerializer = mapSerializer[tag];
    if (tagSerializer) {
      modifiedMapSerializer[tag] = (payload) => {
        return tagSerializer({
          ...payload,
          children: payload.children.join("")
        });
      };
    }
  }
  return richtext.wrapMapSerializer(modifiedMapSerializer);
};
const asHTML = (richTextField, linkResolver, htmlSerializer) => {
  if (richTextField) {
    let serializer;
    if (htmlSerializer) {
      serializer = richtext.composeSerializers(typeof htmlSerializer === "object" ? wrapMapSerializerWithStringChildren(htmlSerializer) : (type, node, text, children, key) => htmlSerializer(type, node, text, children.join(""), key), createDefaultHTMLSerializer(linkResolver));
    } else {
      serializer = createDefaultHTMLSerializer(linkResolver);
    }
    return richtext.serialize(richTextField, serializer).join("");
  } else {
    return null;
  }
};

const isNonNullish = (input) => {
  return input != null;
};
const isNonEmptyArray = (input) => {
  return !!input.length;
};
const richText = (field) => {
  if (!isNonNullish(field)) {
    return false;
  } else if (field.length === 1 && "text" in field[0]) {
    return !!field[0].text;
  } else {
    return !!field.length;
  }
};
const title = richText;
const imageThumbnail = (thumbnail) => {
  return isNonNullish(thumbnail) && !!thumbnail.url;
};
const image = imageThumbnail;
const link = (field) => {
  return isNonNullish(field) && ("id" in field || "url" in field);
};
const linkToMedia = link;
const contentRelationship = link;
const date = isNonNullish;
const timestamp = isNonNullish;
const color = isNonNullish;
const number = isNonNullish;
const keyText = (field) => {
  return isNonNullish(keyText) && !!field;
};
const select = isNonNullish;
const embed = (field) => {
  return isNonNullish(field) && !!field.embed_url;
};
const geoPoint = (field) => {
  return isNonNullish(field) && "longitude" in field;
};
const integrationFields = isNonNullish;
const group = (group2) => {
  return isNonNullish(group2) && isNonEmptyArray(group2);
};
const sliceZone = (slices) => {
  return isNonNullish(slices) && isNonEmptyArray(slices);
};

const isFilled = /*#__PURE__*/Object.freeze({
	__proto__: null,
	richText: richText,
	title: title,
	imageThumbnail: imageThumbnail,
	image: image,
	link: link,
	linkToMedia: linkToMedia,
	contentRelationship: contentRelationship,
	date: date,
	timestamp: timestamp,
	color: color,
	number: number,
	keyText: keyText,
	select: select,
	embed: embed,
	geoPoint: geoPoint,
	integrationFields: integrationFields,
	group: group,
	sliceZone: sliceZone
});

const asImageSrc = (field, params = {}) => {
  if (field && imageThumbnail(field)) {
    return imgixUrlBuilder.buildURL(field.url, params);
  } else {
    return null;
  }
};

const DEFAULT_WIDTHS = [640, 828, 1200, 2048, 3840];
const asImageWidthSrcSet = (field, params = {}) => {
  if (field && imageThumbnail(field)) {
    let {
      widths = DEFAULT_WIDTHS,
      ...imgixParams
    } = params;
    const {
      url,
      dimensions,
      alt: _alt,
      copyright: _copyright,
      ...responsiveViews
    } = field;
    const responsiveViewObjects = Object.values(responsiveViews);
    if (widths === "thumbnails" && responsiveViewObjects.length < 1) {
      widths = DEFAULT_WIDTHS;
    }
    return {
      src: imgixUrlBuilder.buildURL(url, imgixParams),
      srcset: widths === "thumbnails" ? [
        imgixUrlBuilder.buildWidthSrcSet(url, {
          ...imgixParams,
          widths: [dimensions.width]
        }),
        ...responsiveViewObjects.map((thumbnail) => {
          return imgixUrlBuilder.buildWidthSrcSet(thumbnail.url, {
            ...imgixParams,
            widths: [thumbnail.dimensions.width]
          });
        })
      ].join(", ") : imgixUrlBuilder.buildWidthSrcSet(field.url, {
        ...imgixParams,
        widths
      })
    };
  } else {
    return null;
  }
};

const DEFAULT_PIXEL_DENSITIES = [1, 2, 3];
const asImagePixelDensitySrcSet = (field, params = {}) => {
  if (field && imageThumbnail(field)) {
    const { pixelDensities = DEFAULT_PIXEL_DENSITIES, ...imgixParams } = params;
    return {
      src: imgixUrlBuilder.buildURL(field.url, imgixParams),
      srcset: imgixUrlBuilder.buildPixelDensitySrcSet(field.url, {
        ...imgixParams,
        pixelDensities
      })
    };
  } else {
    return null;
  }
};

const Elements = richtext.Element;

Object.defineProperty(exports, 'Element', {
	enumerable: true,
	get: function () { return richtext.Element; }
});
exports.Elements = Elements;
exports.asDate = asDate;
exports.asHTML = asHTML;
exports.asImagePixelDensitySrcSet = asImagePixelDensitySrcSet;
exports.asImageSrc = asImageSrc;
exports.asImageWidthSrcSet = asImageWidthSrcSet;
exports.asLink = asLink;
exports.asText = asText;
exports.documentToLinkField = documentToLinkField;
exports.isFilled = isFilled;
//# sourceMappingURL=index.cjs.map
