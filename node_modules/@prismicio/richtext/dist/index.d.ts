import { RichTextNodeType, RTAnyNode, RTHeading1Node, RTHeading2Node, RTHeading3Node, RTHeading4Node, RTHeading5Node, RTHeading6Node, RTParagraphNode, RTPreformattedNode, RTStrongNode, RTEmNode, RTListItemNode, RTOListItemNode, RTListNode, RTOListNode, RTImageNode, RTEmbedNode, RTLinkNode, RTLabelNode, RTSpanNode, RTNode, RichTextField } from '@prismicio/types';
export { RichTextNodeType as Element } from '@prismicio/types';

/**
 * Serializes a node from a rich text or title field with a function
 *
 * @typeParam ReturnType - Return type of the function serializer
 * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}
 */
declare type RichTextFunctionSerializer<ReturnType> = (type: typeof RichTextNodeType[keyof typeof RichTextNodeType], node: RTAnyNode, text: string | undefined, children: ReturnType[], key: string) => ReturnType | null | undefined;
/**
 * Map serializer's tag function serializer, can be helpful for typing those handlers
 *
 * @typeParam ReturnType - Return type of the tag serializer
 */
declare type RichTextMapSerializerFunction<ReturnType, Node extends RTAnyNode = RTAnyNode, TextType = string | undefined> = (payload: {
    type: Node["type"];
    node: Node;
    text: TextType;
    children: ReturnType[];
    key: string;
}) => ReturnType | null | undefined;
/**
 * Serializes a node from a rich text or title field with a map
 *
 * @remarks
 * This type of serializer needs to be processed through
 * {@link wrapMapSerializer} before being used with {@link serialize}
 * @typeParam ReturnType - Return type of the map serializer
 * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}
 */
declare type RichTextMapSerializer<ReturnType> = {
    heading1?: RichTextMapSerializerFunction<ReturnType, RTHeading1Node, undefined>;
    heading2?: RichTextMapSerializerFunction<ReturnType, RTHeading2Node, undefined>;
    heading3?: RichTextMapSerializerFunction<ReturnType, RTHeading3Node, undefined>;
    heading4?: RichTextMapSerializerFunction<ReturnType, RTHeading4Node, undefined>;
    heading5?: RichTextMapSerializerFunction<ReturnType, RTHeading5Node, undefined>;
    heading6?: RichTextMapSerializerFunction<ReturnType, RTHeading6Node, undefined>;
    paragraph?: RichTextMapSerializerFunction<ReturnType, RTParagraphNode, undefined>;
    preformatted?: RichTextMapSerializerFunction<ReturnType, RTPreformattedNode, undefined>;
    strong?: RichTextMapSerializerFunction<ReturnType, RTStrongNode, string>;
    em?: RichTextMapSerializerFunction<ReturnType, RTEmNode, string>;
    listItem?: RichTextMapSerializerFunction<ReturnType, RTListItemNode, undefined>;
    oListItem?: RichTextMapSerializerFunction<ReturnType, RTOListItemNode, undefined>;
    list?: RichTextMapSerializerFunction<ReturnType, RTListNode, undefined>;
    oList?: RichTextMapSerializerFunction<ReturnType, RTOListNode, undefined>;
    image?: RichTextMapSerializerFunction<ReturnType, RTImageNode, undefined>;
    embed?: RichTextMapSerializerFunction<ReturnType, RTEmbedNode, undefined>;
    hyperlink?: RichTextMapSerializerFunction<ReturnType, RTLinkNode, string>;
    label?: RichTextMapSerializerFunction<ReturnType, RTLabelNode, string>;
    span?: RichTextMapSerializerFunction<ReturnType, RTSpanNode, string>;
};
interface Tree {
    key: string;
    children: TreeNode[];
}
interface TreeNode {
    key: string;
    type: typeof RichTextNodeType[keyof typeof RichTextNodeType];
    text?: string;
    node: RTAnyNode;
    children: TreeNode[];
}

/**
 * Parses a rich text or title field into a tree
 *
 * @remarks
 * This is a low level helper mainly intended to be used by higher level
 * packages. Most users aren't expected to this function directly.
 * @param nodes - A rich text or title field from Prismic
 *
 * @returns Tree from given rich text or title field
 */
declare const asTree: (nodes: RTNode[]) => Tree;

/**
 * Serializes a rich text or title field to a plain text string
 *
 * @param richTextField - A rich text or title field from Prismic
 * @param separator - Separator used to join each element, defaults to a space
 *
 * @returns Plain text equivalent of the provided rich text or title field
 * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}
 */
declare const asText: (richTextField: RichTextField, separator?: string) => string;

/**
 * Serializes a rich text or title field with a given serializer
 *
 * @remarks
 * This is a low level helper mainly intended to be used by higher level
 * packages Most users aren't expected to this function directly
 * @typeParam SerializerReturnType - Return type of the serializer
 * @param richTextField - A rich text or title field from Prismic
 * @param serializer - A function serializer to apply
 *
 * @returns An array of serialized nodes
 * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}
 */
declare const serialize: <SerializerReturnType>(richTextField: RichTextField, serializer: RichTextFunctionSerializer<SerializerReturnType>) => SerializerReturnType[];

/**
 * Wraps a map serializer into a regular function serializer
 *
 * @remarks
 * This is a low level helper mainly intended to be used by higher level
 * packages Most users aren't expected to this function directly
 * @typeParam SerializerReturnType - Return type of the map serializer
 * @param mapSerializer - Map serializer to wrap
 *
 * @returns A regular function serializer
 */
declare const wrapMapSerializer: <SerializerReturnType>(mapSerializer: RichTextMapSerializer<SerializerReturnType>) => RichTextFunctionSerializer<SerializerReturnType>;

/**
 * Takes an array of serializers and returns a serializer applying provided
 * serializers sequentially until a result is returned
 *
 * @remarks
 * This is a low level helper mainly intended to be used by higher level
 * packages Most users aren't expected to this function directly
 * @typeParam SerializerReturnType - Return type of serializers
 * @param serializers - Serializers to compose
 *
 * @returns Composed serializer
 */
declare const composeSerializers: <SerializerReturnType>(...serializers: (RichTextFunctionSerializer<SerializerReturnType> | undefined)[]) => RichTextFunctionSerializer<SerializerReturnType>;

export { RichTextFunctionSerializer, RichTextMapSerializer, RichTextMapSerializerFunction, asText, asTree, composeSerializers, serialize, wrapMapSerializer };
