declare type EmptyObjectField = Record<string, never>;
/**
 * Valid states for fields. Not all fields use this type (e.g. BooleanField).
 */
declare type FieldState = "empty" | "filled";
/**
 * Types for RichTextNodes
 *
 * @see More details: {@link https://prismic.io/docs/core-concepts/rich-text-title}
 */
declare const RichTextNodeType: {
    readonly heading1: "heading1";
    readonly heading2: "heading2";
    readonly heading3: "heading3";
    readonly heading4: "heading4";
    readonly heading5: "heading5";
    readonly heading6: "heading6";
    readonly paragraph: "paragraph";
    readonly preformatted: "preformatted";
    readonly strong: "strong";
    readonly em: "em";
    readonly listItem: "list-item";
    readonly oListItem: "o-list-item";
    readonly list: "group-list-item";
    readonly oList: "group-o-list-item";
    readonly image: "image";
    readonly embed: "embed";
    readonly hyperlink: "hyperlink";
    readonly label: "label";
    readonly span: "span";
};
/**
 * Base to be extended by other RT Nodes.
 */
interface RTTextNodeBase {
    text: string;
    spans: RTInlineNode[];
}
/**
 * Rich Text `heading1` node
 */
interface RTHeading1Node extends RTTextNodeBase {
    type: typeof RichTextNodeType.heading1;
}
/**
 * Rich Text `heading2` node
 */
interface RTHeading2Node extends RTTextNodeBase {
    type: typeof RichTextNodeType.heading2;
}
/**
 * Rich Text `heading3` node
 */
interface RTHeading3Node extends RTTextNodeBase {
    type: typeof RichTextNodeType.heading3;
}
/**
 * Rich Text `heading4` node
 */
interface RTHeading4Node extends RTTextNodeBase {
    type: typeof RichTextNodeType.heading4;
}
/**
 * Rich Text `heading5` node
 */
interface RTHeading5Node extends RTTextNodeBase {
    type: typeof RichTextNodeType.heading5;
}
/**
 * Rich Text `heading6` node
 */
interface RTHeading6Node extends RTTextNodeBase {
    type: typeof RichTextNodeType.heading6;
}
/**
 * Rich Text `paragraph` node
 */
interface RTParagraphNode extends RTTextNodeBase {
    type: typeof RichTextNodeType.paragraph;
}
/**
 * Rich Text `preformatted` node
 */
interface RTPreformattedNode extends RTTextNodeBase {
    type: typeof RichTextNodeType.preformatted;
}
/**
 * Rich Text `list-item` node
 */
interface RTListItemNode extends RTTextNodeBase {
    type: typeof RichTextNodeType.listItem;
}
/**
 * Rich Text `o-list-item` node for ordered lists
 */
interface RTOListItemNode extends RTTextNodeBase {
    type: typeof RichTextNodeType.oListItem;
}
/**
 * @internal Span Node base to be extended for other Span nodes
 */
interface RTSpanNodeBase {
    start: number;
    end: number;
}
/**
 * Rich Text `strong` node
 */
interface RTStrongNode extends RTSpanNodeBase {
    type: typeof RichTextNodeType.strong;
}
/**
 * Rich Text `embed` node
 */
interface RTEmNode extends RTSpanNodeBase {
    type: typeof RichTextNodeType.em;
}
/**
 * Rich Text `label` node
 */
interface RTLabelNode extends RTSpanNodeBase {
    type: typeof RichTextNodeType.label;
    data: {
        label: string;
    };
}
/**
 * Rich Text `image` nodes. They could link to other documents, external web
 * links and media fields
 */
declare type RTImageNode = {
    type: typeof RichTextNodeType.image;
    url: string;
    alt: string | null;
    copyright: string | null;
    dimensions: {
        width: number;
        height: number;
    };
    linkTo?: FilledLinkToDocumentField | FilledLinkToWebField | FilledLinkToMediaField;
};
/**
 * Rich Text `embed` node
 */
declare type RTEmbedNode = {
    type: typeof RichTextNodeType.embed;
    oembed: EmbedField;
};
/**
 * Rich Text `a` node
 *
 * @see More details: {@link https://prismic.io/docs/core-concepts/edit-rich-text#add-links}
 */
interface RTLinkNode extends RTSpanNodeBase {
    type: typeof RichTextNodeType.hyperlink;
    data: FilledLinkToDocumentField | FilledLinkToWebField | FilledLinkToMediaField;
}
/**
 * Rich Text `list` node
 */
interface RTListNode {
    type: typeof RichTextNodeType.list;
    items: RTListItemNode[];
}
/**
 * Rich Text o-lost node
 */
interface RTOListNode {
    type: typeof RichTextNodeType.oList;
    items: RTOListItemNode[];
}
/**
 * Rich Text `span` node
 */
interface RTSpanNode extends RTTextNodeBase {
    type: typeof RichTextNodeType.span;
}
/**
 * Nodes from a Rich Text Field
 */
declare type RTNode = RTHeading1Node | RTHeading2Node | RTHeading3Node | RTHeading4Node | RTHeading5Node | RTHeading6Node | RTParagraphNode | RTPreformattedNode | RTListItemNode | RTOListItemNode | RTImageNode | RTEmbedNode;
/**
 * Rich text nodes with text
 */
declare type RTTextNode = RTHeading1Node | RTHeading2Node | RTHeading3Node | RTHeading4Node | RTHeading5Node | RTHeading6Node | RTParagraphNode | RTPreformattedNode | RTListItemNode | RTOListItemNode;
/**
 * Rich Text block nodes
 */
declare type RTBlockNode = RTHeading1Node | RTHeading2Node | RTHeading3Node | RTHeading4Node | RTHeading5Node | RTHeading6Node | RTParagraphNode | RTPreformattedNode | RTListItemNode | RTOListItemNode | RTListNode | RTOListNode | RTImageNode | RTEmbedNode;
/**
 * Inline Rich Text Nodes
 */
declare type RTInlineNode = RTStrongNode | RTEmNode | RTLabelNode | RTLinkNode;
/**
 * All Rich Text nodes
 */
declare type RTAnyNode = RTBlockNode | RTInlineNode | RTSpanNode;
/**
 * All Rich Text Title Nodes
 *
 * @see Title field documentation: {@link https://prismic.io/docs/core-concepts/rich-text-title}
 */
declare type TitleField<State extends FieldState = FieldState> = State extends "empty" ? [] : [
    Omit<RTHeading1Node | RTHeading2Node | RTHeading3Node | RTHeading4Node | RTHeading5Node | RTHeading6Node, "spans"> & {
        spans: [];
    }
];
declare type RichTextField<State extends FieldState = FieldState> = State extends "empty" ? [] : [RTNode, ...RTNode[]];
/**
 * An individual image within an Image field. The base image and each thumbnail
 * uses this type.
 *
 * @typeParam State - State of the field which determines its shape.
 * @see {@link ImageField} for a full Image field type.
 */
declare type ImageFieldImage<State extends FieldState = FieldState> = State extends "empty" ? EmptyImageFieldImage : FilledImageFieldImage;
interface FilledImageFieldImage {
    url: string;
    dimensions: {
        width: number;
        height: number;
    };
    alt: string | null;
    copyright: string | null;
}
interface EmptyImageFieldImage {
    url?: null;
    dimensions?: null;
    alt?: null;
    copyright?: null;
}
/**
 * Useful to flatten the type output to improve type hints shown in editors. And
 * also to transform an interface into a type to aide with assignability.
 *
 * Taken from the `type-fest` package.
 *
 * @typeParam T - The type to simplify.
 * @see https://github.com/sindresorhus/type-fest/blob/cbd7ec510bd136ac045bbc74e391ee686b8a9a2f/source/simplify.d.ts
 */
declare type Simplify<T> = {
    [P in keyof T]: T[P];
};
/**
 * Image Field
 *
 * @typeParam ThumbnailNames - Names of thumbnails. If the field does not
 *   contain thumbnails, `null` can be used to "disable" thumbnail fields.
 * @typeParam State - State of the field which determines its shape.
 * @see Image field documentation: {@link https://prismic.io/docs/core-concepts/image}
 */
declare type ImageField<ThumbnailNames extends string | null = never, State extends FieldState = FieldState> = Simplify<ImageFieldImage<State> & Record<ThumbnailNames extends string ? Exclude<ThumbnailNames, keyof ImageFieldImage> : never, ImageFieldImage<State>>>;
/**
 * Link Types
 */
declare const LinkType: {
    readonly Any: "Any";
    readonly Document: "Document";
    readonly Media: "Media";
    readonly Web: "Web";
};
/**
 * For link fields that haven't been filled
 *
 * @typeParam Type - The type of link.
 */
declare type EmptyLinkField<Type extends typeof LinkType[keyof typeof LinkType] = typeof LinkType.Any> = {
    link_type: Type | string;
};
/**
 * Links that refer to Documents
 */
interface FilledLinkToDocumentField<TypeEnum = string, LangEnum = string, DataInterface extends Record<string, AnyRegularField | GroupField | SliceZone> = never> {
    link_type: typeof LinkType.Document;
    id: string;
    uid?: string;
    type: TypeEnum;
    tags: string[];
    lang: LangEnum;
    url?: string;
    slug?: string;
    isBroken?: boolean;
    data?: DataInterface;
}
/**
 * Link that points to external website
 */
interface FilledLinkToWebField {
    link_type: typeof LinkType.Web;
    url: string;
    target?: string;
}
/**
 * Link that points to media
 */
interface FilledLinkToMediaField {
    link_type: typeof LinkType.Media;
    name: string;
    kind: string;
    url: string;
    size: string;
    height?: string | null;
    width?: string | null;
}
/**
 * Field for related documents
 *
 * @typeParam TypeEnum - Type API ID of the document.
 * @typeParam LangEnum - Language API ID of the document.
 * @typeParam DataInterface - Data fields for the document (filled in via
 *   GraphQuery of `fetchLinks`).
 * @typeParam State - State of the field which determines its shape.
 */
declare type RelationField<TypeEnum = string, LangEnum = string, DataInterface extends Record<string, AnyRegularField | GroupField | SliceZone> = never, State extends FieldState = FieldState> = State extends "empty" ? EmptyLinkField<typeof LinkType.Document> : FilledLinkToDocumentField<TypeEnum, LangEnum, DataInterface>;
/**
 * Link Field
 *
 * @typeParam TypeEnum - Type API ID of the document.
 * @typeParam LangEnum - Language API ID of the document.
 * @typeParam DataInterface - Data fields for the document (filled in via
 *   GraphQuery of `fetchLinks`).
 * @typeParam State - State of the field which determines its shape.
 */
declare type LinkField<TypeEnum = string, LangEnum = string, DataInterface extends Record<string, AnyRegularField | GroupField | SliceZone> = never, State extends FieldState = FieldState> = State extends "empty" ? EmptyLinkField<typeof LinkType.Any> : RelationField<TypeEnum, LangEnum, DataInterface, State> | FilledLinkToWebField | LinkToMediaField<State>;
/**
 * Link field that points to media
 *
 * @typeParam State - State of the field which determines its shape.
 */
declare type LinkToMediaField<State extends FieldState = FieldState> = State extends "empty" ? EmptyLinkField<typeof LinkType.Media> : FilledLinkToMediaField;
/**
 * oEmbed 1.0 possible types.
 *
 * @see oEmbed specification: {@link https://oembed.com}
 */
declare const OEmbedType: {
    readonly Photo: "photo";
    readonly Video: "video";
    readonly Link: "link";
    readonly Rich: "rich";
};
/**
 * oEmbed response base fields. Those are every mandatory fields an oEmbed
 * response must feature.
 *
 * @see oEmbed specification: {@link https://oembed.com}
 */
declare type OEmbedBase<TType extends typeof OEmbedType[keyof typeof OEmbedType]> = {
    /**
     * oEmbed resource type.
     */
    type: TType;
    /**
     * oEmbed version number, this must be "1.0".
     */
    version: string;
};
/**
 * oEmbed response extra fields. Those are every non-mandatory and unknown
 * fields an oEmbed response can feature.
 *
 * @see oEmbed specification: {@link https://oembed.com}
 */
declare type OEmbedExtra = {
    /**
     * oEmbed text title, describing the resource.
     */
    title?: string | null;
    /**
     * oEmbed resource author/owner name.
     */
    author_name?: string | null;
    /**
     * oEmbed resource author/owner URL.
     */
    author_url?: string | null;
    /**
     * oEmbed resource provider name.
     */
    provider_name?: string | null;
    /**
     * oEmbed resource provider URL.
     */
    provider_url?: string | null;
    /**
     * oEmbed suggested cache lifetime for the resource, in seconds.
     */
    cache_age?: number | null;
    /**
     * oEmbed resource thumbnail URL.
     */
    thumbnail_url?: string | null;
    /**
     * oEmbed resource thumbnail width.
     */
    thumbnail_width?: number | null;
    /**
     * oEmbed resource thumbnail height.
     */
    thumbnail_height?: number | null;
    /**
     * Providers may optionally include any parameters not specified in this
     * document (so long as they use the same key-value format) and consumers may
     * choose to ignore these. Consumers must ignore parameters they do not understand.
     *
     * @see oEmbed specification: {@link https://oembed.com}
     */
    [key: string]: unknown | null;
};
/**
 * oEmbed photo type. Those are every mandatory fields an oEmbed photo response
 * must feature.
 *
 * @see oEmbed specification: {@link https://oembed.com}
 */
declare type PhotoOEmbed = OEmbedBase<typeof OEmbedType.Photo> & {
    /**
     * oEmbed source URL of the image.
     */
    url: string;
    /**
     * oEmbed width in pixels of the image.
     */
    width: number;
    /**
     * oEmbed height in pixels of the image.
     */
    height: number;
};
/**
 * oEmbed video type. Those are every mandatory fields an oEmbed video response
 * must feature.
 *
 * @see oEmbed specification: {@link https://oembed.com}
 */
declare type VideoOEmbed = OEmbedBase<typeof OEmbedType.Video> & {
    /**
     * oEmbed HTML required to embed a video player.
     */
    html: string;
    /**
     * oEmbed width in pixels required to display the HTML.
     */
    width: number;
    /**
     * oEmbed height in pixels required to display the HTML.
     */
    height: number;
};
/**
 * oEmbed link type. Those are every mandatory fields an oEmbed link response
 * must feature.
 *
 * @see oEmbed specification: {@link https://oembed.com}
 */
declare type LinkOEmbed = OEmbedBase<typeof OEmbedType.Link>;
/**
 * oEmbed rich type. Those are every mandatory fields an oEmbed rich response
 * must feature.
 *
 * @see oEmbed specification: {@link https://oembed.com}
 */
declare type RichOEmbed = OEmbedBase<typeof OEmbedType.Rich> & {
    /**
     * oEmbed HTML required to display the resource.
     */
    html: string;
    /**
     * oEmbed width in pixels required to display the HTML.
     */
    width: number;
    /**
     * oEmbed height in pixels required to display the HTML.
     */
    height: number;
};
/**
 * Any of the possible types of oEmbed response. Those contains only mandatory
 * fields their respective oEmbed response type must feature.
 *
 * @see oEmbed specification: {@link https://oembed.com}
 */
declare type AnyOEmbed = PhotoOEmbed | VideoOEmbed | LinkOEmbed | RichOEmbed;
/**
 * An Embed field.
 *
 * @typeParam Data - Data provided by the URL's oEmbed provider.
 * @typeParam State - State of the field which determines its shape.
 * @see More details: {@link https://prismic.io/docs/core-concepts/embed}
 */
declare type EmbedField<Data extends AnyOEmbed = AnyOEmbed & OEmbedExtra, State extends FieldState = FieldState> = State extends "empty" ? EmptyObjectField : Data & {
    embed_url: string;
    html: string | null;
};
/**
 * A Date field.
 *
 * @typeParam State - State of the field which determines its shape.
 * @see More details: {@link https://prismic.io/docs/core-concepts/date}
 */
declare type DateField<State extends FieldState = FieldState> = State extends "empty" ? null : `${number}-${number}-${number}`;
/**
 * Simple Timestamp Field
 *
 * @typeParam State - State of the field which determines its shape.
 */
declare type TimestampField<State extends FieldState = FieldState> = State extends "empty" ? null : `${DateField<"filled">}T${number}:${number}:${number}+${number}`;
/**
 * A Color field.
 *
 * @typeParam State - State of the field which determines its shape.
 * @see More details: {@link https://prismic.io/docs/core-concepts/color}
 */
declare type ColorField<State extends FieldState = FieldState> = State extends "empty" ? null : `#${string}`;
/**
 * A Number field
 *
 * @typeParam State - State of the field which determines its shape.
 * @see More details: {@link https://prismic.io/docs/core-concepts/number}
 */
declare type NumberField<State extends FieldState = FieldState> = State extends "empty" ? null : number;
/**
 * A Key text field
 *
 * @typeParam State - State of the field which determines its shape.
 * @see More details: {@link https://prismic.io/docs/core-concepts/key-text}
 */
declare type KeyTextField<State extends FieldState = FieldState> = State extends "empty" ? null | "" : string;
/**
 * A Select field
 *
 * @typeParam Enum - Selectable options for the field.
 * @typeParam State - State of the field which determines its shape.
 * @see More details: {@link https://prismic.io/docs/core-concepts/select}
 */
declare type SelectField<Enum extends string = string, State extends FieldState = FieldState> = State extends "empty" ? null : Enum;
/**
 * A Boolean field.
 *
 * @see More details: {@link https://prismic.io/docs/core-concepts/boolean}
 */
declare type BooleanField = boolean;
/**
 * A Geopoint field.
 *
 * @typeParam State - State of the field which determines its shape.
 * @see More details: {@link https://prismic.io/docs/core-concepts/geopoint}
 */
declare type GeoPointField<State extends FieldState = FieldState> = State extends "empty" ? EmptyObjectField : {
    latitude: number;
    longitude: number;
};
/**
 * A Group field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/group}
 */
declare type GroupField<Fields extends Record<string, AnyRegularField> = Record<string, AnyRegularField>, State extends FieldState = FieldState> = State extends "empty" ? [] : [Fields, ...Fields[]];
/**
 * Integration Fields for Custom APIs
 *
 * @typeParam Blob - Data from the integrated API.
 * @typeParam State - State of the field which determines its shape.
 * @see More details: {@link https://prismic.io/docs/core-concepts/integration-fields-setup}
 */
declare type IntegrationFields<Blob = unknown, State extends FieldState = FieldState> = State extends "empty" ? null : {
    id: string;
    title?: string;
    description?: string;
    image_url?: string;
    last_update: number;
    blob: Blob;
};
/**
 * Slice - Sections of your website
 *
 * @see More details: {@link https://prismic.io/docs/core-concepts/slices}
 */
interface Slice<SliceType = string, PrimaryFields extends Record<string, AnyRegularField> = Record<string, AnyRegularField>, ItemsFields extends Record<string, AnyRegularField> = Record<string, AnyRegularField>> {
    slice_type: SliceType;
    slice_label: string | null;
    primary: PrimaryFields;
    items: ItemsFields[];
}
/**
 * Shared Slice
 *
 * @see More details: {@link https://prismic.io/docs/core-concepts/reusing-slices#shared-slices}
 */
declare type SharedSlice<SliceType = string, Variations extends SharedSliceVariation = SharedSliceVariation> = {
    slice_type: SliceType;
    slice_label: null;
} & Variations;
interface SharedSliceVariation<Variation = string, PrimaryFields extends Record<string, AnyRegularField> = Record<string, AnyRegularField>, ItemsFields extends Record<string, AnyRegularField> = Record<string, AnyRegularField>> {
    variation: Variation;
    version: string;
    primary: PrimaryFields;
    items: ItemsFields[];
}
/**
 * Prismic Slices are sections of your website. Prismic documents contain a
 * dynamic "Slice Zone" that allows content creators to add, edit, and rearrange
 * Slices to compose dynamic layouts for any page design, such as blog posts,
 * landing pages, case studies, and tutorials.
 *
 * @see More details: {@link https://prismic.io/docs/technologies/adding-the-slicezone-component-nextjs}
 */
declare type SliceZone<Slices extends Slice | SharedSlice = Slice | SharedSlice, State extends FieldState = FieldState> = State extends "empty" ? [] : [Slices, ...Slices[]];
declare type AnyRegularField = TitleField | RichTextField | ImageField | RelationField | LinkField | LinkToMediaField | DateField | TimestampField | ColorField | NumberField | KeyTextField | SelectField | BooleanField | EmbedField | GeoPointField | IntegrationFields;

/**
 * Document metadata for a translation of a Prismic document.
 */
interface AlternateLanguage<TypeEnum = string, LangEnum = string> {
    id: string;
    uid?: string;
    type: TypeEnum;
    lang: LangEnum;
}
/**
 * Metadata for Prismic Document
 */
interface PrismicDocumentHeader<TypeEnum = string, LangEnum = string> {
    /**
     * The unique identifier for the document. Guaranteed to be unique among all
     * documents in the Prismic repository.
     */
    id: string;
    /**
     * The unique identifier for the document. Guaranteed to be unique among all
     * Prismic documents of the same type.
     */
    uid: string | null;
    /**
     * Url that refers to document.
     */
    url: string | null;
    /**
     * Type of the document.
     */
    type: TypeEnum;
    /**
     * Href for document.
     */
    href: string;
    /**
     * Tags associated with document.
     */
    tags: string[];
    /**
     * The timestamp at which the document was first published.
     */
    first_publication_date: string;
    /**
     * The timestamp at which the document was last published.
     */
    last_publication_date: string;
    /**
     * Slugs associated with document.
     */
    slugs: string[];
    /**
     * Documents that are related to this document.
     */
    linked_documents: unknown[];
    /**
     * Language of document.
     */
    lang: LangEnum;
    /**
     * Array to access alternate language versions for document.
     */
    alternate_languages: AlternateLanguage<TypeEnum, LangEnum>[];
}
/**
 * A Prismic document served through REST API v2.
 *
 * @see More details on Custom Types: {@link https://prismic.io/docs/technologies/introduction-to-the-content-query-api}
 */
interface PrismicDocument<DataInterface extends Record<string, AnyRegularField | GroupField | SliceZone> = Record<string, any>, TypeEnum = string, LangEnum = string> extends PrismicDocumentHeader<TypeEnum, LangEnum> {
    /**
     * Data contained in the document.
     */
    data: DataInterface;
}
/**
 * A Prismic document served through REST API v2. Does not contain a UID (a
 * unique identifier).
 *
 * @see More details on Custom Types: {@link https://prismic.io/docs/technologies/introduction-to-the-content-query-api}
 * @see More details on the UID field: {@link https://prismic.io/docs/core-concepts/uid}
 */
interface PrismicDocumentWithoutUID<DataInterface extends Record<string, AnyRegularField | GroupField | SliceZone> = Record<string, any>, TypeEnum = string, LangEnum = string> extends PrismicDocument<DataInterface, TypeEnum, LangEnum> {
    /**
     * This document does not have a UID field. This property will always be `null`.
     *
     * The unique identifier for the document. Guaranteed to be unique among all
     * Prismic documents of the same type.
     */
    uid: null;
}
/**
 * A Prismic document served through REST API v2. Contains a UID (a unique identifier).
 *
 * @see More details on Custom Types: {@link https://prismic.io/docs/technologies/introduction-to-the-content-query-api}
 * @see More details on the UID field: {@link https://prismic.io/docs/core-concepts/uid}
 */
interface PrismicDocumentWithUID<DataInterface extends Record<string, AnyRegularField | GroupField | SliceZone> = Record<string, any>, TypeEnum = string, LangEnum = string> extends PrismicDocument<DataInterface, TypeEnum, LangEnum> {
    /**
     * The unique identifier for the document. Guaranteed to be unique among all
     * Prismic documents of the same type.
     */
    uid: string;
}

/**
 * A Prismic Custom Type model.
 *
 * @typeParam ID - API ID of the Custom Type.
 * @typeParam Definition - The Custom Type's tabs and their fields.
 */
interface CustomTypeModel<ID extends string = string, Definition extends CustomTypeModelDefinition = CustomTypeModelDefinition> {
    /**
     * The ID of the Custom Type model.
     */
    id: ID;
    /**
     * The human readable name of the Custom Type Model.
     */
    label: string;
    /**
     * Determines if more than one document for the Custom Type can be created.
     */
    repeatable: boolean;
    /**
     * The Custom Type model definition.
     */
    json: Definition;
    /**
     * Determines if new documents for the Custom Type can be created.
     */
    status: boolean;
}
/**
 * A Prismic Custom Type's tabs and their fields.
 *
 * @typeParam TabName - Names of Custom Type tabs.
 */
declare type CustomTypeModelDefinition<TabName extends string = string> = Record<TabName, CustomTypeModelTab>;
/**
 * A Custom Type's tab. Each tab can contain any number of fields but is limited
 * to one Slice Zone.
 *
 * @typeParam FieldName - API IDs of the fields.
 */
declare type CustomTypeModelTab<Fields extends Record<string, CustomTypeModelField> = Record<string, CustomTypeModelField>> = Fields;
/**
 * A Custom Type field.
 */
declare type CustomTypeModelField = CustomTypeModelUIDField | CustomTypeModelGroupField | CustomTypeModelSliceZoneField | CustomTypeModelFieldForGroup;
/**
 * Any Custom Type field that is valid for a Group field.
 */
declare type CustomTypeModelFieldForGroup = CustomTypeModelBooleanField | CustomTypeModelColorField | CustomTypeModelDateField | CustomTypeModelEmbedField | CustomTypeModelGeoPointField | CustomTypeModelImageField | CustomTypeModelIntegrationFieldsField | CustomTypeModelContentRelationshipField | CustomTypeModelLinkField | CustomTypeModelLinkToMediaField | CustomTypeModelNumberField | CustomTypeModelSelectField | CustomTypeModelRichTextField | CustomTypeModelTitleField | CustomTypeModelKeyTextField | CustomTypeModelTimestampField;
/**
 * Type identifier for a Custom Type field.
 */
declare const CustomTypeModelFieldType: {
    readonly Boolean: "Boolean";
    readonly Color: "Color";
    readonly Date: "Date";
    readonly Embed: "Embed";
    readonly GeoPoint: "GeoPoint";
    readonly Group: "Group";
    readonly Image: "Image";
    readonly IntegrationFields: "IntegrationFields";
    readonly Link: "Link";
    readonly Number: "Number";
    readonly Select: "Select";
    readonly Slices: "Slices";
    readonly StructuredText: "StructuredText";
    readonly Text: "Text";
    readonly Timestamp: "Timestamp";
    readonly UID: "UID";
};
/**
 * A Boolean Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/boolean}
 */
interface CustomTypeModelBooleanField {
    type: typeof CustomTypeModelFieldType.Boolean;
    config: {
        label: string;
    };
}
/**
 * A Color Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/color}
 */
interface CustomTypeModelColorField {
    type: typeof CustomTypeModelFieldType.Color;
    config: {
        label: string;
        placeholder?: string;
    };
}
/**
 * A Date Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/date}
 */
interface CustomTypeModelDateField {
    type: typeof CustomTypeModelFieldType.Date;
    config: {
        label: string;
        placeholder?: string;
    };
}
/**
 * An Embed Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/embed}
 */
interface CustomTypeModelEmbedField {
    type: typeof CustomTypeModelFieldType.Embed;
    config: {
        label: string;
        placeholder?: string;
    };
}
/**
 * A GeoPoint Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/geopoint}
 */
interface CustomTypeModelGeoPointField {
    type: typeof CustomTypeModelFieldType.GeoPoint;
    config: {
        label: string;
    };
}
/**
 * A Group Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/group}
 *
 * @typeParam Fields - A record of fields that can be repeated.
 */
interface CustomTypeModelGroupField<Fields extends Record<string, CustomTypeModelFieldForGroup> = Record<string, CustomTypeModelFieldForGroup>> {
    type: typeof CustomTypeModelFieldType.Group;
    config: {
        label: string;
        fields: Fields;
    };
}
/**
 * An Image Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/image}
 */
interface CustomTypeModelImageField<ThumbnailNames extends string = string> {
    type: typeof CustomTypeModelFieldType.Image;
    config: {
        label: string;
        constraint: CustomTypeModelImageConstraint | Record<string, never>;
        thumbnails: readonly CustomTypeModelImageThumbnail<ThumbnailNames>[];
    };
}
/**
 * Dimension constraints for an Image Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/image}
 */
interface CustomTypeModelImageConstraint {
    width: number | null;
    height: number | null;
}
/**
 * A thumbnail for an Image Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/image}
 */
interface CustomTypeModelImageThumbnail<Name extends string = string> extends CustomTypeModelImageConstraint {
    name: Name;
}
/**
 * An Integration Fields Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/integration-fields}
 */
interface CustomTypeModelIntegrationFieldsField {
    type: typeof CustomTypeModelFieldType.IntegrationFields;
    config: {
        label: string;
        placeholder?: string;
        catalog: string;
    };
}
/**
 * Type of a Link Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/link-content-relationship}
 */
declare const CustomTypeModelLinkSelectType: {
    readonly Document: "document";
    readonly Media: "media";
};
/**
 * A Content Relationship Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/link-content-relationship}
 */
interface CustomTypeModelContentRelationshipField<CustomTypeIDs extends string = string, Tags extends string = string> {
    type: typeof CustomTypeModelFieldType.Link;
    config: {
        label: string;
        placeholder?: string;
        select: typeof CustomTypeModelLinkSelectType.Document;
        customtypes?: readonly CustomTypeIDs[];
        tags?: readonly Tags[];
    };
}
/**
 * A Link Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/link-content-relationship}
 */
interface CustomTypeModelLinkField {
    type: typeof CustomTypeModelFieldType.Link;
    config: {
        label: string;
        placeholder?: string;
        select?: null;
        allowTargetBlank?: true;
    };
}
/**
 * A Link to Media Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/link-content-relationship}
 */
interface CustomTypeModelLinkToMediaField {
    type: typeof CustomTypeModelFieldType.Link;
    config: {
        label: string;
        placeholder?: string;
        select: typeof CustomTypeModelLinkSelectType.Media;
    };
}
/**
 * A Number Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/number}
 */
interface CustomTypeModelNumberField {
    type: typeof CustomTypeModelFieldType.Number;
    config: {
        label: string;
        placeholder?: string;
    };
}
/**
 * A Select Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/select}
 *
 * @typeParam Options - Options for the field.
 * @typeParam DefaultValue - Default value for the field.
 */
interface CustomTypeModelSelectField<Option extends string = string, DefaultValue extends Option = Option> {
    type: typeof CustomTypeModelFieldType.Select;
    config: {
        label: string;
        placeholder?: string;
        options: Option[];
        default_value?: DefaultValue;
    };
}
/**
 * A Rich Text Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/rich-text-title}
 */
declare type CustomTypeModelRichTextField = CustomTypeModelRichTextMultiField | CustomTypeModelRichTextSingleField;
/**
 * A Rich Text Custom Type field which supports multiple blocks of content.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/rich-text-title}
 */
interface CustomTypeModelRichTextMultiField {
    type: typeof CustomTypeModelFieldType.StructuredText;
    config: {
        label: string;
        placeholder?: string;
        allowTargetBlank?: true;
        multi: string;
    };
}
/**
 * A Rich Text Custom Type field which supports one block of content.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/rich-text-title}
 */
interface CustomTypeModelRichTextSingleField {
    type: typeof CustomTypeModelFieldType.StructuredText;
    config: {
        label: string;
        placeholder?: string;
        allowTargetBlank?: true;
        single: string;
    };
}
/**
 * A Title Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/rich-text-title}
 */
declare type CustomTypeModelTitleField = CustomTypeModelRichTextSingleField;
/**
 * A Key Text Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/key-text}
 */
interface CustomTypeModelKeyTextField {
    type: typeof CustomTypeModelFieldType.Text;
    config: {
        label: string;
        placeholder?: string;
    };
}
/**
 * A Timestamp Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/timestamp}
 */
interface CustomTypeModelTimestampField {
    type: typeof CustomTypeModelFieldType.Timestamp;
    config: {
        label: string;
        placeholder?: string;
    };
}
/**
 * A UID Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/uid}
 */
interface CustomTypeModelUIDField {
    type: typeof CustomTypeModelFieldType.UID;
    config: {
        label: string;
        placeholder?: string;
    };
}
/**
 * A Slice Zone Custom Type field.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/slices}
 */
interface CustomTypeModelSliceZoneField<Slices extends Record<string, CustomTypeModelSlice | CustomTypeModelSharedSlice> = Record<string, CustomTypeModelSlice | CustomTypeModelSharedSlice>> {
    type: typeof CustomTypeModelFieldType.Slices;
    fieldset: "Slice zone";
    config: {
        labels: Record<string, readonly CustomTypeModelSliceLabel[]>;
        choices: Slices;
    };
}
/**
 * Label for a Slice.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/slices}
 */
interface CustomTypeModelSliceLabel {
    name: string;
    display: string;
}
/**
 * Display type for a Slice.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/slices}
 */
declare const CustomTypeModelSliceDisplay: {
    readonly List: "list";
    readonly Grid: "grid";
};
/**
 * Type identifier for a Slice.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/slices}
 */
declare const CustomTypeModelSliceType: {
    readonly Slice: "Slice";
    readonly SharedSlice: "SharedSlice";
};
/**
 * A Slice for a Custom Type.
 *
 * More details: {@link https://prismic.io/docs/core-concepts/slices}
 *
 * @typeParam NonRepeatFields - A record of fields that cannnot be repeated.
 * @typeParam RepeatFields - A record of fields that can be repeated.
 */
interface CustomTypeModelSlice<NonRepeatFields extends Record<string, CustomTypeModelFieldForGroup> = Record<string, CustomTypeModelFieldForGroup>, RepeatFields extends Record<string, CustomTypeModelFieldForGroup> = Record<string, CustomTypeModelFieldForGroup>> {
    type: typeof CustomTypeModelSliceType.Slice;
    fieldset: string;
    description: string;
    icon: string;
    display: typeof CustomTypeModelSliceDisplay[keyof typeof CustomTypeModelSliceDisplay];
    "non-repeat": NonRepeatFields;
    repeat: RepeatFields;
}
/**
 * A Shared Slice for a Custom Type.
 *
 * More details:
 *
 * - {@link https://prismic.io/docs/core-concepts/slices}
 * - {@link https://prismic.io/docs/core-concepts/reusing-slices}
 */
interface CustomTypeModelSharedSlice {
    type: typeof CustomTypeModelSliceType.SharedSlice;
}
/**
 * A Prismic Shared Slice model.
 *
 * More details:
 *
 * - {@link https://prismic.io/docs/core-concepts/slices}
 * - {@link https://prismic.io/docs/core-concepts/reusing-slices}
 *
 * @typeParam Variation - A variation for the Shared Slice.
 */
interface SharedSliceModel<ID extends string = string, Variation extends SharedSliceModelVariation = SharedSliceModelVariation> {
    type: typeof CustomTypeModelSliceType.SharedSlice;
    id: ID;
    name: string;
    description: string;
    variations: readonly Variation[];
}
/**
 * A Shared Slice variation.
 *
 * More details:
 *
 * - {@link https://prismic.io/docs/core-concepts/slices}
 * - {@link https://prismic.io/docs/core-concepts/reusing-slices}
 *
 * @typeParam PrimaryFields - A record of fields that cannnot be repeated.
 * @typeParam ItemFields - A record of fields that can be repeated.
 */
interface SharedSliceModelVariation<ID extends string = string, PrimaryFields extends Record<string, CustomTypeModelFieldForGroup> = Record<string, CustomTypeModelFieldForGroup>, ItemFields extends Record<string, CustomTypeModelFieldForGroup> = Record<string, CustomTypeModelFieldForGroup>> {
    id: ID;
    name: string;
    docURL: string;
    version: string;
    description: string;
    primary: PrimaryFields;
    items: ItemFields;
}

/**
 * Repository metadata returned from the Prismic REST API V2. This data can be
 * fetched by sending a `GET` a request to a repository's `/api/v2` endpoint.
 *
 * @see More details on the `/api/v2` endpoint: {@link https://prismic.io/docs/technologies/introduction-to-the-content-query-api#the-api-endpoint-2}
 */
interface Repository {
    /**
     * A list of refs for the repository.
     *
     * @see {@link Ref}
     */
    refs: Ref[];
    /**
     * An identifier used to query content with the latest Integration Fields data.
     */
    integrationFieldsRef: string | null;
    /**
     * A list of languages for the repository.
     *
     * @see {@link Language}
     */
    languages: Language[];
    /**
     * A list of the repository's Custom Type API IDs mapped to their human-readable name.
     */
    types: Record<string, string>;
    /**
     * A list of tags for the repository.
     */
    tags: string[];
    /**
     * An internally-used list of REST API features for the repository.
     *
     * @internal
     */
    forms: Record<string, Form>;
    /**
     * The URL used to begin the OAuth process for the repository.
     */
    oauth_initiate: string;
    oauth_token: string;
    /**
     * The version of the API.
     */
    version: string;
    /**
     * Licensing information for the repository content.
     */
    license: string;
    /**
     * @deprecated Experiments are no longer part of Prismic.
     */
    experiments: unknown;
    /**
     * @deprecated Bookmarks are not longer part of Prismic.
     */
    bookmarks: Record<string, string>;
}
/**
 * Metadata for a reference to a version of a repository's content.
 *
 * @see More details on refs: {@link https://prismic.io/docs/technologies/introduction-to-the-content-query-api#prismic-api-ref}
 */
interface Ref {
    /**
     * The unique identifier for the ref.
     */
    id: string;
    /**
     * The identifier that should be provided to the API to select a content version.
     */
    ref: string;
    /**
     * A human-readable name for the ref. The master ref is always named "Master".
     */
    label: string;
    /**
     * Determines if the ref is the master ref. The master ref contains the latest
     * published content.
     */
    isMasterRef: boolean;
    /**
     * If the ref is associated with a Release, this field contains the timestamp
     * at which the Release will be automatically published, if set.
     *
     * @see More details on Releases: {@link https://prismic.io/docs/core-concepts/draft-plan-and-schedule-content#releases}
     */
    scheduledAt?: string;
}
/**
 * Metadata for a Release.
 *
 * @remarks
 * This is an alias for `Ref`.
 * @see {@link Ref}
 * @see More details on Releases: {@link https://prismic.io/docs/core-concepts/draft-plan-and-schedule-content#releases}
 */
declare type Release = Ref;
/**
 * Metadata for a language that has been configured for a repository.
 */
interface Language {
    /**
     * A unique identifier for the language.
     */
    id: string;
    /**
     * The name of the language.
     */
    name: string;
}
/**
 * A query response from the Prismic REST API V2. The response contains
 * paginated metadata and a list of matching results for the query.
 *
 * @typeParam Document - The type(s) of Prismic document that can be returned.
 * @see More details on querying: {@link https://prismic.io/docs/technologies/introduction-to-the-content-query-api}
 */
interface Query<Document extends PrismicDocument = PrismicDocument> {
    /**
     * The page number for this page of results.
     */
    page: number;
    /**
     * Maximum number of results per page.
     */
    results_per_page: number;
    /**
     * Number of results in this page.
     */
    results_size: number;
    /**
     * Total number of results within all pages.
     */
    total_results_size: number;
    /**
     * Total number of pages.
     */
    total_pages: number;
    /**
     * The Prismic REST API V2 URL to the next page, if one exists.
     */
    next_page: string | null;
    /**
     * The Prismic REST API V2 URL to the previous page, if one exists.
     */
    prev_page: string | null;
    /**
     * A paginated list of documents matching the query.
     */
    results: Document[];
}
/**
 * A Prismic REST API V2 feature supported by the repository. It contains
 * metadata about the feature and how to interact with it via the API.
 *
 * @internal
 */
interface Form {
    method: "GET";
    enctype: string;
    action: string;
    name?: string;
    rel?: string;
    fields: Record<string, FormField>;
}
/**
 * A field for a feature of the Prismic REST API V2. It contains metadata about
 * the feature's field and how to interact with it via the API.
 *
 * @internal
 */
interface FormField {
    type: "String" | "Integer";
    multiple: boolean;
    default?: string;
}
/**
 * List of tags returned from the Prismic Tags API. This data can be fetched by
 * sending a `GET` request to a repository's `/api/tags` endpoint.
 *
 * @typeParam Tag - Tags that are returned by the Tags API.
 * @see More details on the Tags API: {@link https://prismic.io/docs/technologies/tags-api-technical-reference}
 */
declare type Tags<Tag extends string = string> = Tag[];

declare type WebhookBody = WebhookBodyAPIUpdate | WebhookBodyTestTrigger;
/**
 * Types of Prismic Webhooks.
 *
 * @see More details: {@link https://prismic.io/docs/core-concepts/webhooks}
 */
declare const WebhookType: {
    readonly APIUpdate: "api-update";
    readonly TestTrigger: "test-trigger";
};
interface WebhookBodyBase {
    type: typeof WebhookType[keyof typeof WebhookType];
    domain: string;
    apiUrl: string;
    secret: string | null;
}
/**
 * Webhook payload sent when a Prismic repository content is updated.
 *
 * @see More details: {@link https://prismic.io/docs/core-concepts/webhooks}
 */
interface WebhookBodyAPIUpdate extends WebhookBodyBase {
    type: typeof WebhookType.APIUpdate;
    masterRef?: string;
    releases: WebhookBodyAPIUpdateOperations<WebhookBodyAPIUpdateRelease>;
    masks: WebhookBodyAPIUpdateOperations<WebhookBodyAPIUpdateMask>;
    tags: WebhookBodyAPIUpdateOperations<WebhookBodyAPIUpdateTag>;
    documents: string[];
    /**
     * @deprecated Experiments are no longer supported by Prismic.
     */
    experiments?: WebhookBodyAPIUpdateOperations<unknown>;
}
/**
 * Webhook payload sent when a test webhook action is triggered.
 *
 * @see More details: {@link https://prismic.io/docs/core-concepts/webhooks}
 */
interface WebhookBodyTestTrigger extends WebhookBodyBase {
    type: typeof WebhookType.TestTrigger;
}
interface WebhookBodyAPIUpdateOperations<T> {
    update?: T[];
    addition?: T[];
    deletion?: T[];
}
/**
 * Metadata representing a mask (also called a Custom Type).
 *
 * @see More details: {@link https://prismic.io/docs/core-concepts/custom-types}
 */
interface WebhookBodyAPIUpdateMask {
    id: string;
    label: string;
}
/**
 * Metadata representing a tag.
 *
 * @see More details: {@link https://prismic.io/docs/core-concepts/document-tags}
 */
interface WebhookBodyAPIUpdateTag {
    id: string;
}
/**
 * Metadata representing a Release.
 *
 * @see More details: {@link https://prismic.io/docs/core-concepts/draft-plan-and-schedule-content#releases}
 */
interface WebhookBodyAPIUpdateRelease {
    id: string;
    ref: string;
    label: string;
    documents: string[];
}

/**
 * @deprecated Use {@link OEmbedType} instead.
 */
declare const EmbedType: {
    readonly Photo: "photo";
    readonly Video: "video";
    readonly Link: "link";
    readonly Rich: "rich";
};

/**
 * @deprecated Use {@link PhotoOEmbed}, {@link VideoOEmbed}, {@link LinkOEmbed},
 *   {@link RichOEmbed}, or {@link AnyOEmbed} instead.
 */
declare type CommonEmbedData = AnyOEmbed & OEmbedExtra;

export { AlternateLanguage, AnyOEmbed, AnyRegularField, BooleanField, ColorField, CommonEmbedData, CustomTypeModel, CustomTypeModelBooleanField, CustomTypeModelColorField, CustomTypeModelContentRelationshipField, CustomTypeModelDateField, CustomTypeModelDefinition, CustomTypeModelEmbedField, CustomTypeModelField, CustomTypeModelFieldForGroup, CustomTypeModelFieldType, CustomTypeModelGeoPointField, CustomTypeModelGroupField, CustomTypeModelImageConstraint, CustomTypeModelImageField, CustomTypeModelImageThumbnail, CustomTypeModelIntegrationFieldsField, CustomTypeModelKeyTextField, CustomTypeModelLinkField, CustomTypeModelLinkSelectType, CustomTypeModelLinkToMediaField, CustomTypeModelNumberField, CustomTypeModelRichTextField, CustomTypeModelRichTextMultiField, CustomTypeModelRichTextSingleField, CustomTypeModelSelectField, CustomTypeModelSharedSlice, CustomTypeModelSlice, CustomTypeModelSliceDisplay, CustomTypeModelSliceLabel, CustomTypeModelSliceType, CustomTypeModelSliceZoneField, CustomTypeModelTab, CustomTypeModelTimestampField, CustomTypeModelTitleField, CustomTypeModelUIDField, DateField, EmbedField, EmbedType, EmptyImageFieldImage, EmptyLinkField, FieldState, FilledImageFieldImage, FilledLinkToDocumentField, FilledLinkToMediaField, FilledLinkToWebField, Form, FormField, GeoPointField, GroupField, ImageField, ImageFieldImage, IntegrationFields, KeyTextField, Language, LinkField, LinkOEmbed, LinkToMediaField, LinkType, NumberField, OEmbedExtra, OEmbedType, PhotoOEmbed, PrismicDocument, PrismicDocumentHeader, PrismicDocumentWithUID, PrismicDocumentWithoutUID, Query, RTAnyNode, RTBlockNode, RTEmNode, RTEmbedNode, RTHeading1Node, RTHeading2Node, RTHeading3Node, RTHeading4Node, RTHeading5Node, RTHeading6Node, RTImageNode, RTInlineNode, RTLabelNode, RTLinkNode, RTListItemNode, RTListNode, RTNode, RTOListItemNode, RTOListNode, RTParagraphNode, RTPreformattedNode, RTSpanNode, RTSpanNodeBase, RTStrongNode, RTTextNode, RTTextNodeBase, Ref, RelationField, Release, Repository, RichOEmbed, RichTextField, RichTextNodeType, SelectField, SharedSlice, SharedSliceModel, SharedSliceModelVariation, SharedSliceVariation, Slice, SliceZone, Tags, TimestampField, TitleField, VideoOEmbed, WebhookBody, WebhookBodyAPIUpdate, WebhookBodyTestTrigger, WebhookType };
