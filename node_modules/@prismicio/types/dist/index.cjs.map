{"version":3,"file":"index.cjs","sources":["../src/fields.ts","../src/customType.ts","../src/webhook.ts","../src/index.ts"],"sourcesContent":["type EmptyObjectField = Record<string, never>;\n\n/**\n * Valid states for fields. Not all fields use this type (e.g. BooleanField).\n */\nexport type FieldState = \"empty\" | \"filled\";\n\n/**\n * Types for RichTextNodes\n *\n * @see More details: {@link https://prismic.io/docs/core-concepts/rich-text-title}\n */\nexport const RichTextNodeType = {\n\theading1: \"heading1\",\n\theading2: \"heading2\",\n\theading3: \"heading3\",\n\theading4: \"heading4\",\n\theading5: \"heading5\",\n\theading6: \"heading6\",\n\tparagraph: \"paragraph\",\n\tpreformatted: \"preformatted\",\n\tstrong: \"strong\",\n\tem: \"em\",\n\tlistItem: \"list-item\",\n\toListItem: \"o-list-item\",\n\tlist: \"group-list-item\",\n\toList: \"group-o-list-item\",\n\timage: \"image\",\n\tembed: \"embed\",\n\thyperlink: \"hyperlink\",\n\tlabel: \"label\",\n\tspan: \"span\",\n} as const;\n\n// Text nodes\n\n/**\n * Base to be extended by other RT Nodes.\n */\nexport interface RTTextNodeBase {\n\ttext: string;\n\tspans: RTInlineNode[];\n}\n\n/**\n * Rich Text `heading1` node\n */\nexport interface RTHeading1Node extends RTTextNodeBase {\n\ttype: typeof RichTextNodeType.heading1;\n}\n\n/**\n * Rich Text `heading2` node\n */\nexport interface RTHeading2Node extends RTTextNodeBase {\n\ttype: typeof RichTextNodeType.heading2;\n}\n\n/**\n * Rich Text `heading3` node\n */\nexport interface RTHeading3Node extends RTTextNodeBase {\n\ttype: typeof RichTextNodeType.heading3;\n}\n\n/**\n * Rich Text `heading4` node\n */\nexport interface RTHeading4Node extends RTTextNodeBase {\n\ttype: typeof RichTextNodeType.heading4;\n}\n\n/**\n * Rich Text `heading5` node\n */\nexport interface RTHeading5Node extends RTTextNodeBase {\n\ttype: typeof RichTextNodeType.heading5;\n}\n\n/**\n * Rich Text `heading6` node\n */\nexport interface RTHeading6Node extends RTTextNodeBase {\n\ttype: typeof RichTextNodeType.heading6;\n}\n\n/**\n * Rich Text `paragraph` node\n */\nexport interface RTParagraphNode extends RTTextNodeBase {\n\ttype: typeof RichTextNodeType.paragraph;\n}\n\n/**\n * Rich Text `preformatted` node\n */\nexport interface RTPreformattedNode extends RTTextNodeBase {\n\ttype: typeof RichTextNodeType.preformatted;\n}\n\n/**\n * Rich Text `list-item` node\n */\nexport interface RTListItemNode extends RTTextNodeBase {\n\ttype: typeof RichTextNodeType.listItem;\n}\n\n/**\n * Rich Text `o-list-item` node for ordered lists\n */\nexport interface RTOListItemNode extends RTTextNodeBase {\n\ttype: typeof RichTextNodeType.oListItem;\n}\n\n// Span nodes\n\n/**\n * @internal Span Node base to be extended for other Span nodes\n */\nexport interface RTSpanNodeBase {\n\tstart: number;\n\tend: number;\n}\n/**\n * Rich Text `strong` node\n */\nexport interface RTStrongNode extends RTSpanNodeBase {\n\ttype: typeof RichTextNodeType.strong;\n}\n\n/**\n * Rich Text `embed` node\n */\nexport interface RTEmNode extends RTSpanNodeBase {\n\ttype: typeof RichTextNodeType.em;\n}\n\n/**\n * Rich Text `label` node\n */\nexport interface RTLabelNode extends RTSpanNodeBase {\n\ttype: typeof RichTextNodeType.label;\n\tdata: {\n\t\tlabel: string;\n\t};\n}\n\n// Media nodes\n\n/**\n * Rich Text `image` nodes. They could link to other documents, external web\n * links and media fields\n */\nexport type RTImageNode = {\n\ttype: typeof RichTextNodeType.image;\n\turl: string;\n\talt: string | null;\n\tcopyright: string | null;\n\tdimensions: {\n\t\twidth: number;\n\t\theight: number;\n\t};\n\tlinkTo?:\n\t\t| FilledLinkToDocumentField\n\t\t| FilledLinkToWebField\n\t\t| FilledLinkToMediaField;\n};\n\n/**\n * Rich Text `embed` node\n */\nexport type RTEmbedNode = {\n\ttype: typeof RichTextNodeType.embed;\n\toembed: EmbedField;\n};\n\n// Link nodes\n\n/**\n * Rich Text `a` node\n *\n * @see More details: {@link https://prismic.io/docs/core-concepts/edit-rich-text#add-links}\n */\nexport interface RTLinkNode extends RTSpanNodeBase {\n\ttype: typeof RichTextNodeType.hyperlink;\n\tdata:\n\t\t| FilledLinkToDocumentField\n\t\t| FilledLinkToWebField\n\t\t| FilledLinkToMediaField;\n}\n\n// Serialization related nodes\n\n/**\n * Rich Text `list` node\n */\nexport interface RTListNode {\n\ttype: typeof RichTextNodeType.list;\n\titems: RTListItemNode[];\n}\n\n/**\n * Rich Text o-lost node\n */\nexport interface RTOListNode {\n\ttype: typeof RichTextNodeType.oList;\n\titems: RTOListItemNode[];\n}\n\n// This one is confusing but it's actually the inner content of a block\n/**\n * Rich Text `span` node\n */\nexport interface RTSpanNode extends RTTextNodeBase {\n\ttype: typeof RichTextNodeType.span;\n}\n\n// Helpers\n\n/**\n * Nodes from a Rich Text Field\n */\nexport type RTNode =\n\t| RTHeading1Node\n\t| RTHeading2Node\n\t| RTHeading3Node\n\t| RTHeading4Node\n\t| RTHeading5Node\n\t| RTHeading6Node\n\t| RTParagraphNode\n\t| RTPreformattedNode\n\t| RTListItemNode\n\t| RTOListItemNode\n\t| RTImageNode\n\t| RTEmbedNode;\n\n/**\n * Rich text nodes with text\n */\nexport type RTTextNode =\n\t| RTHeading1Node\n\t| RTHeading2Node\n\t| RTHeading3Node\n\t| RTHeading4Node\n\t| RTHeading5Node\n\t| RTHeading6Node\n\t| RTParagraphNode\n\t| RTPreformattedNode\n\t| RTListItemNode\n\t| RTOListItemNode;\n\n/**\n * Rich Text block nodes\n */\nexport type RTBlockNode =\n\t| RTHeading1Node\n\t| RTHeading2Node\n\t| RTHeading3Node\n\t| RTHeading4Node\n\t| RTHeading5Node\n\t| RTHeading6Node\n\t| RTParagraphNode\n\t| RTPreformattedNode\n\t| RTListItemNode\n\t| RTOListItemNode\n\t| RTListNode\n\t| RTOListNode\n\t| RTImageNode\n\t| RTEmbedNode;\n\n/**\n * Inline Rich Text Nodes\n */\nexport type RTInlineNode = RTStrongNode | RTEmNode | RTLabelNode | RTLinkNode;\n\n/**\n * All Rich Text nodes\n */\nexport type RTAnyNode = RTBlockNode | RTInlineNode | RTSpanNode;\n\n/**\n * All Rich Text Title Nodes\n *\n * @see Title field documentation: {@link https://prismic.io/docs/core-concepts/rich-text-title}\n */\nexport type TitleField<State extends FieldState = FieldState> =\n\tState extends \"empty\"\n\t\t? []\n\t\t: [\n\t\t\t\tOmit<\n\t\t\t\t\t| RTHeading1Node\n\t\t\t\t\t| RTHeading2Node\n\t\t\t\t\t| RTHeading3Node\n\t\t\t\t\t| RTHeading4Node\n\t\t\t\t\t| RTHeading5Node\n\t\t\t\t\t| RTHeading6Node,\n\t\t\t\t\t\"spans\"\n\t\t\t\t> & {\n\t\t\t\t\tspans: [];\n\t\t\t\t},\n\t\t  ];\n\nexport type RichTextField<State extends FieldState = FieldState> =\n\tState extends \"empty\" ? [] : [RTNode, ...RTNode[]];\n\n// Image\n\n/**\n * An individual image within an Image field. The base image and each thumbnail\n * uses this type.\n *\n * @typeParam State - State of the field which determines its shape.\n * @see {@link ImageField} for a full Image field type.\n */\nexport type ImageFieldImage<State extends FieldState = FieldState> =\n\tState extends \"empty\" ? EmptyImageFieldImage : FilledImageFieldImage;\n\nexport interface FilledImageFieldImage {\n\turl: string;\n\tdimensions: {\n\t\twidth: number;\n\t\theight: number;\n\t};\n\talt: string | null;\n\tcopyright: string | null;\n}\n\nexport interface EmptyImageFieldImage {\n\turl?: null;\n\tdimensions?: null;\n\talt?: null;\n\tcopyright?: null;\n}\n\n/**\n * Useful to flatten the type output to improve type hints shown in editors. And\n * also to transform an interface into a type to aide with assignability.\n *\n * Taken from the `type-fest` package.\n *\n * @typeParam T - The type to simplify.\n * @see https://github.com/sindresorhus/type-fest/blob/cbd7ec510bd136ac045bbc74e391ee686b8a9a2f/source/simplify.d.ts\n */\ntype Simplify<T> = { [P in keyof T]: T[P] };\n\n/**\n * Image Field\n *\n * @typeParam ThumbnailNames - Names of thumbnails. If the field does not\n *   contain thumbnails, `null` can be used to \"disable\" thumbnail fields.\n * @typeParam State - State of the field which determines its shape.\n * @see Image field documentation: {@link https://prismic.io/docs/core-concepts/image}\n */\nexport type ImageField<\n\tThumbnailNames extends string | null = never,\n\tState extends FieldState = FieldState,\n> = Simplify<\n\tImageFieldImage<State> &\n\t\tRecord<\n\t\t\tThumbnailNames extends string\n\t\t\t\t? Exclude<ThumbnailNames, keyof ImageFieldImage>\n\t\t\t\t: never,\n\t\t\tImageFieldImage<State>\n\t\t>\n>;\n\n// Links\n\n/**\n * Link Types\n */\nexport const LinkType = {\n\tAny: \"Any\",\n\tDocument: \"Document\",\n\tMedia: \"Media\",\n\tWeb: \"Web\",\n} as const;\n\n/**\n * For link fields that haven't been filled\n *\n * @typeParam Type - The type of link.\n */\nexport type EmptyLinkField<\n\tType extends typeof LinkType[keyof typeof LinkType] = typeof LinkType.Any,\n> = {\n\tlink_type: Type | string;\n};\n\n/**\n * Links that refer to Documents\n */\nexport interface FilledLinkToDocumentField<\n\tTypeEnum = string,\n\tLangEnum = string,\n\tDataInterface extends Record<\n\t\tstring,\n\t\tAnyRegularField | GroupField | SliceZone\n\t> = never,\n> {\n\tlink_type: typeof LinkType.Document;\n\tid: string;\n\tuid?: string;\n\ttype: TypeEnum;\n\ttags: string[];\n\tlang: LangEnum;\n\turl?: string;\n\tslug?: string;\n\tisBroken?: boolean;\n\tdata?: DataInterface;\n}\n\n/**\n * Link that points to external website\n */\nexport interface FilledLinkToWebField {\n\tlink_type: typeof LinkType.Web;\n\turl: string;\n\ttarget?: string;\n}\n\n/**\n * Link that points to media\n */\nexport interface FilledLinkToMediaField {\n\tlink_type: typeof LinkType.Media;\n\tname: string;\n\tkind: string;\n\turl: string;\n\tsize: string;\n\theight?: string | null;\n\twidth?: string | null;\n}\n\n/**\n * Field for related documents\n *\n * @typeParam TypeEnum - Type API ID of the document.\n * @typeParam LangEnum - Language API ID of the document.\n * @typeParam DataInterface - Data fields for the document (filled in via\n *   GraphQuery of `fetchLinks`).\n * @typeParam State - State of the field which determines its shape.\n */\nexport type RelationField<\n\tTypeEnum = string,\n\tLangEnum = string,\n\tDataInterface extends Record<\n\t\tstring,\n\t\tAnyRegularField | GroupField | SliceZone\n\t> = never,\n\tState extends FieldState = FieldState,\n> = State extends \"empty\"\n\t? EmptyLinkField<typeof LinkType.Document>\n\t: FilledLinkToDocumentField<TypeEnum, LangEnum, DataInterface>;\n\n/**\n * Link Field\n *\n * @typeParam TypeEnum - Type API ID of the document.\n * @typeParam LangEnum - Language API ID of the document.\n * @typeParam DataInterface - Data fields for the document (filled in via\n *   GraphQuery of `fetchLinks`).\n * @typeParam State - State of the field which determines its shape.\n */\nexport type LinkField<\n\tTypeEnum = string,\n\tLangEnum = string,\n\tDataInterface extends Record<\n\t\tstring,\n\t\tAnyRegularField | GroupField | SliceZone\n\t> = never,\n\tState extends FieldState = FieldState,\n> = State extends \"empty\"\n\t? EmptyLinkField<typeof LinkType.Any>\n\t:\n\t\t\t| RelationField<TypeEnum, LangEnum, DataInterface, State>\n\t\t\t| FilledLinkToWebField\n\t\t\t| LinkToMediaField<State>;\n\n/**\n * Link field that points to media\n *\n * @typeParam State - State of the field which determines its shape.\n */\nexport type LinkToMediaField<State extends FieldState = FieldState> =\n\tState extends \"empty\"\n\t\t? EmptyLinkField<typeof LinkType.Media>\n\t\t: FilledLinkToMediaField;\n\n// Embed\n\n/**\n * oEmbed 1.0 possible types.\n *\n * @see oEmbed specification: {@link https://oembed.com}\n */\nexport const OEmbedType = {\n\tPhoto: \"photo\",\n\tVideo: \"video\",\n\tLink: \"link\",\n\tRich: \"rich\",\n} as const;\n\n/**\n * oEmbed response base fields. Those are every mandatory fields an oEmbed\n * response must feature.\n *\n * @see oEmbed specification: {@link https://oembed.com}\n */\ntype OEmbedBase<TType extends typeof OEmbedType[keyof typeof OEmbedType]> = {\n\t/**\n\t * oEmbed resource type.\n\t */\n\ttype: TType;\n\n\t/**\n\t * oEmbed version number, this must be \"1.0\".\n\t */\n\tversion: string;\n};\n\n/**\n * oEmbed response extra fields. Those are every non-mandatory and unknown\n * fields an oEmbed response can feature.\n *\n * @see oEmbed specification: {@link https://oembed.com}\n */\nexport type OEmbedExtra = {\n\t/**\n\t * oEmbed text title, describing the resource.\n\t */\n\ttitle?: string | null;\n\n\t/**\n\t * oEmbed resource author/owner name.\n\t */\n\tauthor_name?: string | null;\n\n\t/**\n\t * oEmbed resource author/owner URL.\n\t */\n\tauthor_url?: string | null;\n\n\t/**\n\t * oEmbed resource provider name.\n\t */\n\tprovider_name?: string | null;\n\n\t/**\n\t * oEmbed resource provider URL.\n\t */\n\tprovider_url?: string | null;\n\n\t/**\n\t * oEmbed suggested cache lifetime for the resource, in seconds.\n\t */\n\tcache_age?: number | null;\n\n\t/**\n\t * oEmbed resource thumbnail URL.\n\t */\n\tthumbnail_url?: string | null;\n\n\t/**\n\t * oEmbed resource thumbnail width.\n\t */\n\tthumbnail_width?: number | null;\n\n\t/**\n\t * oEmbed resource thumbnail height.\n\t */\n\tthumbnail_height?: number | null;\n\n\t/**\n\t * Providers may optionally include any parameters not specified in this\n\t * document (so long as they use the same key-value format) and consumers may\n\t * choose to ignore these. Consumers must ignore parameters they do not understand.\n\t *\n\t * @see oEmbed specification: {@link https://oembed.com}\n\t */\n\t[key: string]: unknown | null;\n};\n\n/**\n * oEmbed photo type. Those are every mandatory fields an oEmbed photo response\n * must feature.\n *\n * @see oEmbed specification: {@link https://oembed.com}\n */\nexport type PhotoOEmbed = OEmbedBase<typeof OEmbedType.Photo> & {\n\t/**\n\t * oEmbed source URL of the image.\n\t */\n\turl: string;\n\n\t/**\n\t * oEmbed width in pixels of the image.\n\t */\n\twidth: number;\n\n\t/**\n\t * oEmbed height in pixels of the image.\n\t */\n\theight: number;\n};\n\n/**\n * oEmbed video type. Those are every mandatory fields an oEmbed video response\n * must feature.\n *\n * @see oEmbed specification: {@link https://oembed.com}\n */\nexport type VideoOEmbed = OEmbedBase<typeof OEmbedType.Video> & {\n\t/**\n\t * oEmbed HTML required to embed a video player.\n\t */\n\thtml: string;\n\n\t/**\n\t * oEmbed width in pixels required to display the HTML.\n\t */\n\twidth: number;\n\n\t/**\n\t * oEmbed height in pixels required to display the HTML.\n\t */\n\theight: number;\n};\n\n/**\n * oEmbed link type. Those are every mandatory fields an oEmbed link response\n * must feature.\n *\n * @see oEmbed specification: {@link https://oembed.com}\n */\nexport type LinkOEmbed = OEmbedBase<typeof OEmbedType.Link>;\n\n/**\n * oEmbed rich type. Those are every mandatory fields an oEmbed rich response\n * must feature.\n *\n * @see oEmbed specification: {@link https://oembed.com}\n */\nexport type RichOEmbed = OEmbedBase<typeof OEmbedType.Rich> & {\n\t/**\n\t * oEmbed HTML required to display the resource.\n\t */\n\thtml: string;\n\n\t/**\n\t * oEmbed width in pixels required to display the HTML.\n\t */\n\twidth: number;\n\n\t/**\n\t * oEmbed height in pixels required to display the HTML.\n\t */\n\theight: number;\n};\n\n/**\n * Any of the possible types of oEmbed response. Those contains only mandatory\n * fields their respective oEmbed response type must feature.\n *\n * @see oEmbed specification: {@link https://oembed.com}\n */\nexport type AnyOEmbed = PhotoOEmbed | VideoOEmbed | LinkOEmbed | RichOEmbed;\n\n/**\n * An Embed field.\n *\n * @typeParam Data - Data provided by the URL's oEmbed provider.\n * @typeParam State - State of the field which determines its shape.\n * @see More details: {@link https://prismic.io/docs/core-concepts/embed}\n */\nexport type EmbedField<\n\tData extends AnyOEmbed = AnyOEmbed & OEmbedExtra,\n\tState extends FieldState = FieldState,\n> = State extends \"empty\"\n\t? EmptyObjectField\n\t: Data & {\n\t\t\tembed_url: string;\n\t\t\thtml: string | null;\n\t  };\n\n// Simple Fields\n\n/**\n * A Date field.\n *\n * @typeParam State - State of the field which determines its shape.\n * @see More details: {@link https://prismic.io/docs/core-concepts/date}\n */\nexport type DateField<State extends FieldState = FieldState> =\n\tState extends \"empty\" ? null : `${number}-${number}-${number}`;\n\n/**\n * Simple Timestamp Field\n *\n * @typeParam State - State of the field which determines its shape.\n */\nexport type TimestampField<State extends FieldState = FieldState> =\n\tState extends \"empty\"\n\t\t? null\n\t\t: `${DateField<\"filled\">}T${number}:${number}:${number}+${number}`;\n\n/**\n * A Color field.\n *\n * @typeParam State - State of the field which determines its shape.\n * @see More details: {@link https://prismic.io/docs/core-concepts/color}\n */\nexport type ColorField<State extends FieldState = FieldState> =\n\tState extends \"empty\" ? null : `#${string}`;\n\n/**\n * A Number field\n *\n * @typeParam State - State of the field which determines its shape.\n * @see More details: {@link https://prismic.io/docs/core-concepts/number}\n */\nexport type NumberField<State extends FieldState = FieldState> =\n\tState extends \"empty\" ? null : number;\n\n/**\n * A Key text field\n *\n * @typeParam State - State of the field which determines its shape.\n * @see More details: {@link https://prismic.io/docs/core-concepts/key-text}\n */\nexport type KeyTextField<State extends FieldState = FieldState> =\n\tState extends \"empty\" ? null | \"\" : string;\n\n/**\n * A Select field\n *\n * @typeParam Enum - Selectable options for the field.\n * @typeParam State - State of the field which determines its shape.\n * @see More details: {@link https://prismic.io/docs/core-concepts/select}\n */\nexport type SelectField<\n\tEnum extends string = string,\n\tState extends FieldState = FieldState,\n> = State extends \"empty\" ? null : Enum;\n\n/**\n * A Boolean field.\n *\n * @see More details: {@link https://prismic.io/docs/core-concepts/boolean}\n */\nexport type BooleanField = boolean;\n\n/**\n * A Geopoint field.\n *\n * @typeParam State - State of the field which determines its shape.\n * @see More details: {@link https://prismic.io/docs/core-concepts/geopoint}\n */\nexport type GeoPointField<State extends FieldState = FieldState> =\n\tState extends \"empty\"\n\t\t? EmptyObjectField\n\t\t: {\n\t\t\t\tlatitude: number;\n\t\t\t\tlongitude: number;\n\t\t  };\n\n// Complex\n/**\n * A Group field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/group}\n */\nexport type GroupField<\n\tFields extends Record<string, AnyRegularField> = Record<\n\t\tstring,\n\t\tAnyRegularField\n\t>,\n\tState extends FieldState = FieldState,\n> = State extends \"empty\" ? [] : [Fields, ...Fields[]];\n\n/**\n * Integration Fields for Custom APIs\n *\n * @typeParam Blob - Data from the integrated API.\n * @typeParam State - State of the field which determines its shape.\n * @see More details: {@link https://prismic.io/docs/core-concepts/integration-fields-setup}\n */\nexport type IntegrationFields<\n\tBlob = unknown,\n\tState extends FieldState = FieldState,\n> = State extends \"empty\"\n\t? null\n\t: {\n\t\t\tid: string;\n\t\t\ttitle?: string;\n\t\t\tdescription?: string;\n\t\t\timage_url?: string;\n\t\t\tlast_update: number;\n\t\t\tblob: Blob;\n\t  };\n\n/**\n * Slice - Sections of your website\n *\n * @see More details: {@link https://prismic.io/docs/core-concepts/slices}\n */\nexport interface Slice<\n\tSliceType = string,\n\tPrimaryFields extends Record<string, AnyRegularField> = Record<\n\t\tstring,\n\t\tAnyRegularField\n\t>,\n\tItemsFields extends Record<string, AnyRegularField> = Record<\n\t\tstring,\n\t\tAnyRegularField\n\t>,\n> {\n\tslice_type: SliceType;\n\tslice_label: string | null;\n\tprimary: PrimaryFields;\n\titems: ItemsFields[];\n}\n\n/**\n * Shared Slice\n *\n * @see More details: {@link https://prismic.io/docs/core-concepts/reusing-slices#shared-slices}\n */\nexport type SharedSlice<\n\tSliceType = string,\n\tVariations extends SharedSliceVariation = SharedSliceVariation,\n> = {\n\tslice_type: SliceType;\n\tslice_label: null;\n} & Variations;\n\nexport interface SharedSliceVariation<\n\tVariation = string,\n\tPrimaryFields extends Record<string, AnyRegularField> = Record<\n\t\tstring,\n\t\tAnyRegularField\n\t>,\n\tItemsFields extends Record<string, AnyRegularField> = Record<\n\t\tstring,\n\t\tAnyRegularField\n\t>,\n> {\n\tvariation: Variation;\n\tversion: string;\n\tprimary: PrimaryFields;\n\titems: ItemsFields[];\n}\n/**\n * Prismic Slices are sections of your website. Prismic documents contain a\n * dynamic \"Slice Zone\" that allows content creators to add, edit, and rearrange\n * Slices to compose dynamic layouts for any page design, such as blog posts,\n * landing pages, case studies, and tutorials.\n *\n * @see More details: {@link https://prismic.io/docs/technologies/adding-the-slicezone-component-nextjs}\n */\nexport type SliceZone<\n\tSlices extends Slice | SharedSlice = Slice | SharedSlice,\n\tState extends FieldState = FieldState,\n> = State extends \"empty\" ? [] : [Slices, ...Slices[]];\n\n// Misc\n\nexport type AnyRegularField =\n\t| TitleField\n\t| RichTextField\n\t| ImageField\n\t| RelationField\n\t| LinkField\n\t| LinkToMediaField\n\t| DateField\n\t| TimestampField\n\t| ColorField\n\t| NumberField\n\t| KeyTextField\n\t| SelectField\n\t| BooleanField\n\t| EmbedField\n\t| GeoPointField\n\t| IntegrationFields;\n","/**\n * A Prismic Custom Type model.\n *\n * @typeParam ID - API ID of the Custom Type.\n * @typeParam Definition - The Custom Type's tabs and their fields.\n */\nexport interface CustomTypeModel<\n\tID extends string = string,\n\tDefinition extends CustomTypeModelDefinition = CustomTypeModelDefinition,\n> {\n\t/**\n\t * The ID of the Custom Type model.\n\t */\n\tid: ID;\n\n\t/**\n\t * The human readable name of the Custom Type Model.\n\t */\n\tlabel: string;\n\n\t/**\n\t * Determines if more than one document for the Custom Type can be created.\n\t */\n\trepeatable: boolean;\n\n\t/**\n\t * The Custom Type model definition.\n\t */\n\tjson: Definition;\n\n\t/**\n\t * Determines if new documents for the Custom Type can be created.\n\t */\n\tstatus: boolean;\n}\n\n/**\n * A Prismic Custom Type's tabs and their fields.\n *\n * @typeParam TabName - Names of Custom Type tabs.\n */\nexport type CustomTypeModelDefinition<TabName extends string = string> = Record<\n\tTabName,\n\tCustomTypeModelTab\n>;\n\n/**\n * A Custom Type's tab. Each tab can contain any number of fields but is limited\n * to one Slice Zone.\n *\n * @typeParam FieldName - API IDs of the fields.\n */\nexport type CustomTypeModelTab<\n\tFields extends Record<string, CustomTypeModelField> = Record<\n\t\tstring,\n\t\tCustomTypeModelField\n\t>,\n> = Fields;\n\n/**\n * A Custom Type field.\n */\nexport type CustomTypeModelField =\n\t| CustomTypeModelUIDField\n\t| CustomTypeModelGroupField\n\t| CustomTypeModelSliceZoneField\n\t| CustomTypeModelFieldForGroup;\n\n/**\n * Any Custom Type field that is valid for a Group field.\n */\nexport type CustomTypeModelFieldForGroup =\n\t| CustomTypeModelBooleanField\n\t| CustomTypeModelColorField\n\t| CustomTypeModelDateField\n\t| CustomTypeModelEmbedField\n\t| CustomTypeModelGeoPointField\n\t| CustomTypeModelImageField\n\t| CustomTypeModelIntegrationFieldsField\n\t| CustomTypeModelContentRelationshipField\n\t| CustomTypeModelLinkField\n\t| CustomTypeModelLinkToMediaField\n\t| CustomTypeModelNumberField\n\t| CustomTypeModelSelectField\n\t| CustomTypeModelRichTextField\n\t| CustomTypeModelTitleField\n\t| CustomTypeModelKeyTextField\n\t| CustomTypeModelTimestampField;\n\n/**\n * Type identifier for a Custom Type field.\n */\nexport const CustomTypeModelFieldType = {\n\tBoolean: \"Boolean\",\n\tColor: \"Color\",\n\tDate: \"Date\",\n\tEmbed: \"Embed\",\n\tGeoPoint: \"GeoPoint\",\n\tGroup: \"Group\",\n\tImage: \"Image\",\n\tIntegrationFields: \"IntegrationFields\",\n\tLink: \"Link\",\n\tNumber: \"Number\",\n\tSelect: \"Select\",\n\tSlices: \"Slices\",\n\tStructuredText: \"StructuredText\",\n\tText: \"Text\",\n\tTimestamp: \"Timestamp\",\n\tUID: \"UID\",\n} as const;\n\n/**\n * A Boolean Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/boolean}\n */\nexport interface CustomTypeModelBooleanField {\n\ttype: typeof CustomTypeModelFieldType.Boolean;\n\tconfig: {\n\t\tlabel: string;\n\t};\n}\n\n/**\n * A Color Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/color}\n */\nexport interface CustomTypeModelColorField {\n\ttype: typeof CustomTypeModelFieldType.Color;\n\tconfig: {\n\t\tlabel: string;\n\t\tplaceholder?: string;\n\t};\n}\n\n/**\n * A Date Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/date}\n */\nexport interface CustomTypeModelDateField {\n\ttype: typeof CustomTypeModelFieldType.Date;\n\tconfig: {\n\t\tlabel: string;\n\t\tplaceholder?: string;\n\t};\n}\n\n/**\n * An Embed Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/embed}\n */\nexport interface CustomTypeModelEmbedField {\n\ttype: typeof CustomTypeModelFieldType.Embed;\n\tconfig: {\n\t\tlabel: string;\n\t\tplaceholder?: string;\n\t};\n}\n\n/**\n * A GeoPoint Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/geopoint}\n */\nexport interface CustomTypeModelGeoPointField {\n\ttype: typeof CustomTypeModelFieldType.GeoPoint;\n\tconfig: {\n\t\tlabel: string;\n\t};\n}\n\n/**\n * A Group Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/group}\n *\n * @typeParam Fields - A record of fields that can be repeated.\n */\nexport interface CustomTypeModelGroupField<\n\tFields extends Record<string, CustomTypeModelFieldForGroup> = Record<\n\t\tstring,\n\t\tCustomTypeModelFieldForGroup\n\t>,\n> {\n\ttype: typeof CustomTypeModelFieldType.Group;\n\tconfig: {\n\t\tlabel: string;\n\t\tfields: Fields;\n\t};\n}\n\n/**\n * An Image Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/image}\n */\nexport interface CustomTypeModelImageField<\n\tThumbnailNames extends string = string,\n> {\n\ttype: typeof CustomTypeModelFieldType.Image;\n\tconfig: {\n\t\tlabel: string;\n\t\tconstraint: CustomTypeModelImageConstraint | Record<string, never>;\n\t\tthumbnails: readonly CustomTypeModelImageThumbnail<ThumbnailNames>[];\n\t};\n}\n\n/**\n * Dimension constraints for an Image Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/image}\n */\nexport interface CustomTypeModelImageConstraint {\n\twidth: number | null;\n\theight: number | null;\n}\n\n/**\n * A thumbnail for an Image Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/image}\n */\nexport interface CustomTypeModelImageThumbnail<Name extends string = string>\n\textends CustomTypeModelImageConstraint {\n\tname: Name;\n}\n\n/**\n * An Integration Fields Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/integration-fields}\n */\nexport interface CustomTypeModelIntegrationFieldsField {\n\ttype: typeof CustomTypeModelFieldType.IntegrationFields;\n\tconfig: {\n\t\tlabel: string;\n\t\tplaceholder?: string;\n\t\tcatalog: string;\n\t};\n}\n\n/**\n * Type of a Link Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/link-content-relationship}\n */\nexport const CustomTypeModelLinkSelectType = {\n\tDocument: \"document\",\n\tMedia: \"media\",\n} as const;\n\n/**\n * A Content Relationship Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/link-content-relationship}\n */\nexport interface CustomTypeModelContentRelationshipField<\n\tCustomTypeIDs extends string = string,\n\tTags extends string = string,\n> {\n\ttype: typeof CustomTypeModelFieldType.Link;\n\tconfig: {\n\t\tlabel: string;\n\t\tplaceholder?: string;\n\t\tselect: typeof CustomTypeModelLinkSelectType.Document;\n\t\tcustomtypes?: readonly CustomTypeIDs[];\n\t\ttags?: readonly Tags[];\n\t};\n}\n\n/**\n * A Link Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/link-content-relationship}\n */\nexport interface CustomTypeModelLinkField {\n\ttype: typeof CustomTypeModelFieldType.Link;\n\tconfig: {\n\t\tlabel: string;\n\t\tplaceholder?: string;\n\t\tselect?: null;\n\t\tallowTargetBlank?: true;\n\t};\n}\n\n/**\n * A Link to Media Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/link-content-relationship}\n */\nexport interface CustomTypeModelLinkToMediaField {\n\ttype: typeof CustomTypeModelFieldType.Link;\n\tconfig: {\n\t\tlabel: string;\n\t\tplaceholder?: string;\n\t\tselect: typeof CustomTypeModelLinkSelectType.Media;\n\t};\n}\n\n/**\n * A Number Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/number}\n */\nexport interface CustomTypeModelNumberField {\n\ttype: typeof CustomTypeModelFieldType.Number;\n\tconfig: {\n\t\tlabel: string;\n\t\tplaceholder?: string;\n\t};\n}\n\n/**\n * A Select Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/select}\n *\n * @typeParam Options - Options for the field.\n * @typeParam DefaultValue - Default value for the field.\n */\nexport interface CustomTypeModelSelectField<\n\tOption extends string = string,\n\tDefaultValue extends Option = Option,\n> {\n\ttype: typeof CustomTypeModelFieldType.Select;\n\tconfig: {\n\t\tlabel: string;\n\t\tplaceholder?: string;\n\t\toptions: Option[];\n\t\tdefault_value?: DefaultValue;\n\t};\n}\n\n/**\n * A Rich Text Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/rich-text-title}\n */\nexport type CustomTypeModelRichTextField =\n\t| CustomTypeModelRichTextMultiField\n\t| CustomTypeModelRichTextSingleField;\n\n/**\n * A Rich Text Custom Type field which supports multiple blocks of content.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/rich-text-title}\n */\nexport interface CustomTypeModelRichTextMultiField {\n\ttype: typeof CustomTypeModelFieldType.StructuredText;\n\tconfig: {\n\t\tlabel: string;\n\t\tplaceholder?: string;\n\t\tallowTargetBlank?: true;\n\t\tmulti: string;\n\t};\n}\n\n/**\n * A Rich Text Custom Type field which supports one block of content.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/rich-text-title}\n */\nexport interface CustomTypeModelRichTextSingleField {\n\ttype: typeof CustomTypeModelFieldType.StructuredText;\n\tconfig: {\n\t\tlabel: string;\n\t\tplaceholder?: string;\n\t\tallowTargetBlank?: true;\n\t\tsingle: string;\n\t};\n}\n\n/**\n * A Title Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/rich-text-title}\n */\nexport type CustomTypeModelTitleField = CustomTypeModelRichTextSingleField;\n\n/**\n * A Key Text Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/key-text}\n */\nexport interface CustomTypeModelKeyTextField {\n\ttype: typeof CustomTypeModelFieldType.Text;\n\tconfig: {\n\t\tlabel: string;\n\t\tplaceholder?: string;\n\t};\n}\n\n/**\n * A Timestamp Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/timestamp}\n */\nexport interface CustomTypeModelTimestampField {\n\ttype: typeof CustomTypeModelFieldType.Timestamp;\n\tconfig: {\n\t\tlabel: string;\n\t\tplaceholder?: string;\n\t};\n}\n\n/**\n * A UID Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/uid}\n */\nexport interface CustomTypeModelUIDField {\n\ttype: typeof CustomTypeModelFieldType.UID;\n\tconfig: {\n\t\tlabel: string;\n\t\tplaceholder?: string;\n\t};\n}\n\n/**\n * A Slice Zone Custom Type field.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/slices}\n */\nexport interface CustomTypeModelSliceZoneField<\n\tSlices extends Record<\n\t\tstring,\n\t\tCustomTypeModelSlice | CustomTypeModelSharedSlice\n\t> = Record<string, CustomTypeModelSlice | CustomTypeModelSharedSlice>,\n> {\n\ttype: typeof CustomTypeModelFieldType.Slices;\n\tfieldset: \"Slice zone\";\n\tconfig: {\n\t\tlabels: Record<string, readonly CustomTypeModelSliceLabel[]>;\n\t\tchoices: Slices;\n\t};\n}\n\n/**\n * Label for a Slice.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/slices}\n */\nexport interface CustomTypeModelSliceLabel {\n\tname: string;\n\tdisplay: string;\n}\n\n/**\n * Display type for a Slice.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/slices}\n */\nexport const CustomTypeModelSliceDisplay = {\n\tList: \"list\",\n\tGrid: \"grid\",\n} as const;\n\n/**\n * Type identifier for a Slice.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/slices}\n */\nexport const CustomTypeModelSliceType = {\n\tSlice: \"Slice\",\n\tSharedSlice: \"SharedSlice\",\n} as const;\n\n/**\n * A Slice for a Custom Type.\n *\n * More details: {@link https://prismic.io/docs/core-concepts/slices}\n *\n * @typeParam NonRepeatFields - A record of fields that cannnot be repeated.\n * @typeParam RepeatFields - A record of fields that can be repeated.\n */\nexport interface CustomTypeModelSlice<\n\tNonRepeatFields extends Record<string, CustomTypeModelFieldForGroup> = Record<\n\t\tstring,\n\t\tCustomTypeModelFieldForGroup\n\t>,\n\tRepeatFields extends Record<string, CustomTypeModelFieldForGroup> = Record<\n\t\tstring,\n\t\tCustomTypeModelFieldForGroup\n\t>,\n> {\n\ttype: typeof CustomTypeModelSliceType.Slice;\n\tfieldset: string;\n\tdescription: string;\n\ticon: string;\n\tdisplay: typeof CustomTypeModelSliceDisplay[keyof typeof CustomTypeModelSliceDisplay];\n\t\"non-repeat\": NonRepeatFields;\n\trepeat: RepeatFields;\n}\n\n/**\n * A Shared Slice for a Custom Type.\n *\n * More details:\n *\n * - {@link https://prismic.io/docs/core-concepts/slices}\n * - {@link https://prismic.io/docs/core-concepts/reusing-slices}\n */\nexport interface CustomTypeModelSharedSlice {\n\ttype: typeof CustomTypeModelSliceType.SharedSlice;\n}\n\n/**\n * A Prismic Shared Slice model.\n *\n * More details:\n *\n * - {@link https://prismic.io/docs/core-concepts/slices}\n * - {@link https://prismic.io/docs/core-concepts/reusing-slices}\n *\n * @typeParam Variation - A variation for the Shared Slice.\n */\nexport interface SharedSliceModel<\n\tID extends string = string,\n\tVariation extends SharedSliceModelVariation = SharedSliceModelVariation,\n> {\n\ttype: typeof CustomTypeModelSliceType.SharedSlice;\n\tid: ID;\n\tname: string;\n\tdescription: string;\n\tvariations: readonly Variation[];\n}\n\n/**\n * A Shared Slice variation.\n *\n * More details:\n *\n * - {@link https://prismic.io/docs/core-concepts/slices}\n * - {@link https://prismic.io/docs/core-concepts/reusing-slices}\n *\n * @typeParam PrimaryFields - A record of fields that cannnot be repeated.\n * @typeParam ItemFields - A record of fields that can be repeated.\n */\nexport interface SharedSliceModelVariation<\n\tID extends string = string,\n\tPrimaryFields extends Record<string, CustomTypeModelFieldForGroup> = Record<\n\t\tstring,\n\t\tCustomTypeModelFieldForGroup\n\t>,\n\tItemFields extends Record<string, CustomTypeModelFieldForGroup> = Record<\n\t\tstring,\n\t\tCustomTypeModelFieldForGroup\n\t>,\n> {\n\tid: ID;\n\tname: string;\n\tdocURL: string;\n\tversion: string;\n\tdescription: string;\n\tprimary: PrimaryFields;\n\titems: ItemFields;\n}\n","export type WebhookBody = WebhookBodyAPIUpdate | WebhookBodyTestTrigger;\n\n/**\n * Types of Prismic Webhooks.\n *\n * @see More details: {@link https://prismic.io/docs/core-concepts/webhooks}\n */\nexport const WebhookType = {\n\tAPIUpdate: \"api-update\",\n\tTestTrigger: \"test-trigger\",\n} as const;\n\ninterface WebhookBodyBase {\n\ttype: typeof WebhookType[keyof typeof WebhookType];\n\tdomain: string;\n\tapiUrl: string;\n\tsecret: string | null;\n}\n\n/**\n * Webhook payload sent when a Prismic repository content is updated.\n *\n * @see More details: {@link https://prismic.io/docs/core-concepts/webhooks}\n */\nexport interface WebhookBodyAPIUpdate extends WebhookBodyBase {\n\ttype: typeof WebhookType.APIUpdate;\n\tmasterRef?: string;\n\treleases: WebhookBodyAPIUpdateOperations<WebhookBodyAPIUpdateRelease>;\n\tmasks: WebhookBodyAPIUpdateOperations<WebhookBodyAPIUpdateMask>;\n\ttags: WebhookBodyAPIUpdateOperations<WebhookBodyAPIUpdateTag>;\n\tdocuments: string[];\n\t/**\n\t * @deprecated Experiments are no longer supported by Prismic.\n\t */\n\texperiments?: WebhookBodyAPIUpdateOperations<unknown>;\n}\n\n/**\n * Webhook payload sent when a test webhook action is triggered.\n *\n * @see More details: {@link https://prismic.io/docs/core-concepts/webhooks}\n */\nexport interface WebhookBodyTestTrigger extends WebhookBodyBase {\n\ttype: typeof WebhookType.TestTrigger;\n}\n\ninterface WebhookBodyAPIUpdateOperations<T> {\n\tupdate?: T[];\n\taddition?: T[];\n\tdeletion?: T[];\n}\n\n/**\n * Metadata representing a mask (also called a Custom Type).\n *\n * @see More details: {@link https://prismic.io/docs/core-concepts/custom-types}\n */\ninterface WebhookBodyAPIUpdateMask {\n\tid: string;\n\tlabel: string;\n}\n\n/**\n * Metadata representing a tag.\n *\n * @see More details: {@link https://prismic.io/docs/core-concepts/document-tags}\n */\ninterface WebhookBodyAPIUpdateTag {\n\tid: string;\n}\n\n/**\n * Metadata representing a Release.\n *\n * @see More details: {@link https://prismic.io/docs/core-concepts/draft-plan-and-schedule-content#releases}\n */\ninterface WebhookBodyAPIUpdateRelease {\n\tid: string;\n\tref: string;\n\tlabel: string;\n\tdocuments: string[];\n}\n","export type {\n\tPrismicDocumentHeader,\n\tPrismicDocument,\n\tPrismicDocumentWithUID,\n\tPrismicDocumentWithoutUID,\n\tAlternateLanguage,\n} from \"./document\";\n\nexport { RichTextNodeType, LinkType, OEmbedType } from \"./fields\";\n\n// Deprecations\nimport { OEmbedType } from \"./fields\";\n/**\n * @deprecated Use {@link OEmbedType} instead.\n */\nexport const EmbedType = OEmbedType;\n\nexport type {\n\t// RichText & Title\n\tTitleField,\n\tRichTextField,\n\t// RichText & Title (block nodes)\n\tRTTextNodeBase,\n\tRTHeading1Node,\n\tRTHeading2Node,\n\tRTHeading3Node,\n\tRTHeading4Node,\n\tRTHeading5Node,\n\tRTHeading6Node,\n\tRTParagraphNode,\n\tRTPreformattedNode,\n\tRTListItemNode,\n\tRTOListItemNode,\n\t// RichText & Title (span nodes)\n\tRTSpanNodeBase,\n\tRTStrongNode,\n\tRTEmNode,\n\tRTLabelNode,\n\t// RichText & Title (media nodes)\n\tRTImageNode,\n\tRTEmbedNode,\n\t// RichText & Title (link nodes)\n\tRTLinkNode,\n\t// RichText & Title (serialization related nodes)\n\tRTListNode,\n\tRTOListNode,\n\tRTSpanNode,\n\t// RichText & Title (helpers)\n\tRTNode,\n\tRTTextNode,\n\tRTBlockNode,\n\tRTInlineNode,\n\tRTAnyNode,\n\t// Image\n\tImageField,\n\tImageFieldImage,\n\tFilledImageFieldImage,\n\tEmptyImageFieldImage,\n\t// Links\n\tEmptyLinkField,\n\tFilledLinkToDocumentField,\n\tFilledLinkToWebField,\n\tFilledLinkToMediaField,\n\tRelationField,\n\tLinkField,\n\tLinkToMediaField,\n\t// Embed\n\tOEmbedExtra,\n\tPhotoOEmbed,\n\tVideoOEmbed,\n\tLinkOEmbed,\n\tRichOEmbed,\n\tAnyOEmbed,\n\tEmbedField,\n\t// Simple\n\tDateField,\n\tTimestampField,\n\tColorField,\n\tNumberField,\n\tKeyTextField,\n\tSelectField,\n\tBooleanField,\n\tGeoPointField,\n\t// Complex\n\tGroupField,\n\tIntegrationFields,\n\tSlice,\n\tSharedSlice,\n\tSharedSliceVariation,\n\tSliceZone,\n\t// Misc\n\tAnyRegularField,\n\t// Meta\n\tFieldState,\n} from \"./fields\";\n\n// Deprecations (unused import for @link references)\nimport type {\n\tOEmbedExtra,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tPhotoOEmbed,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tVideoOEmbed,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tLinkOEmbed,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tRichOEmbed,\n\tAnyOEmbed,\n} from \"./fields\";\n/**\n * @deprecated Use {@link PhotoOEmbed}, {@link VideoOEmbed}, {@link LinkOEmbed},\n *   {@link RichOEmbed}, or {@link AnyOEmbed} instead.\n */\nexport type CommonEmbedData = AnyOEmbed & OEmbedExtra;\n\nexport {\n\tCustomTypeModelFieldType,\n\tCustomTypeModelLinkSelectType,\n\tCustomTypeModelSliceDisplay,\n\tCustomTypeModelSliceType,\n} from \"./customType\";\n\nexport type {\n\tCustomTypeModel,\n\tCustomTypeModelDefinition,\n\tCustomTypeModelTab,\n\t// Fields\n\tCustomTypeModelField,\n\tCustomTypeModelFieldForGroup,\n\t// Individual Fields\n\tCustomTypeModelBooleanField,\n\tCustomTypeModelColorField,\n\tCustomTypeModelContentRelationshipField,\n\tCustomTypeModelDateField,\n\tCustomTypeModelEmbedField,\n\tCustomTypeModelGeoPointField,\n\tCustomTypeModelGroupField,\n\tCustomTypeModelImageConstraint,\n\tCustomTypeModelImageField,\n\tCustomTypeModelImageThumbnail,\n\tCustomTypeModelIntegrationFieldsField,\n\tCustomTypeModelKeyTextField,\n\tCustomTypeModelLinkField,\n\tCustomTypeModelLinkToMediaField,\n\tCustomTypeModelNumberField,\n\tCustomTypeModelRichTextField,\n\tCustomTypeModelRichTextMultiField,\n\tCustomTypeModelRichTextSingleField,\n\tCustomTypeModelSelectField,\n\tCustomTypeModelTimestampField,\n\tCustomTypeModelTitleField,\n\tCustomTypeModelUIDField,\n\t// Slices\n\tCustomTypeModelSliceZoneField,\n\tCustomTypeModelSlice,\n\tCustomTypeModelSliceLabel,\n\tCustomTypeModelSharedSlice,\n\t// SharedSlices\n\tSharedSliceModel,\n\tSharedSliceModelVariation,\n} from \"./customType\";\n\nexport type {\n\tRepository,\n\tRef,\n\tRelease,\n\tLanguage,\n\tQuery,\n\tForm,\n\tFormField,\n\tTags,\n} from \"./api\";\n\nexport { WebhookType } from \"./webhook\";\n\nexport type {\n\tWebhookBody,\n\tWebhookBodyAPIUpdate,\n\tWebhookBodyTestTrigger,\n} from \"./webhook\";\n"],"names":["OEmbedType2"],"mappings":";;;;MAYa,mBAAmB;AAAA,EAC/B,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,cAAc;AAAA,EACd,QAAQ;AAAA,EACR,IAAI;AAAA,EACJ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,MAAM;AAAA,EACN,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AAAA,EACP,WAAW;AAAA,EACX,OAAO;AAAA,EACP,MAAM;AAAA;MAoVM,WAAW;AAAA,EACvB,KAAK;AAAA,EACL,UAAU;AAAA,EACV,OAAO;AAAA,EACP,KAAK;AAAA;MAyHO,aAAa;AAAA,EACzB,OAAO;AAAA,EACP,OAAO;AAAA,EACP,MAAM;AAAA,EACN,MAAM;AAAA;;MCxZM,2BAA2B;AAAA,EACvC,SAAS;AAAA,EACT,OAAO;AAAA,EACP,MAAM;AAAA,EACN,OAAO;AAAA,EACP,UAAU;AAAA,EACV,OAAO;AAAA,EACP,OAAO;AAAA,EACP,mBAAmB;AAAA,EACnB,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,gBAAgB;AAAA,EAChB,MAAM;AAAA,EACN,WAAW;AAAA,EACX,KAAK;AAAA;MA6IO,gCAAgC;AAAA,EAC5C,UAAU;AAAA,EACV,OAAO;AAAA;MA4MK,8BAA8B;AAAA,EAC1C,MAAM;AAAA,EACN,MAAM;AAAA;MAQM,2BAA2B;AAAA,EACvC,OAAO;AAAA,EACP,aAAa;AAAA;;MC5cD,cAAc;AAAA,EAC1B,WAAW;AAAA,EACX,aAAa;AAAA;;MCMD,YAAYA;;;;;;;;;;;;"}